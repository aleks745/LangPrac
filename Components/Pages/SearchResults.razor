@page "/search-results/{UserIds}"

@using LangPrac.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor

<h3>Search Results</h3>

@if (Users != null)
{
    @if (Users.Count > 0)
    {
        <ul class="list-group">
            @foreach (var user in Users)
            {
                <li class="list-group-item">
                    @user.UserName
                    <button class="btn btn-primary" @onclick="() => SendInvite(user)" disabled="@(invitationSent.ContainsKey(user.Id) && invitationSent[user.Id])">Invite</button>
                    @if (invitationSent.ContainsKey(user.Id) && invitationSent[user.Id])
                    {
                        <span>Invitation sent!</span>
                    }
                </li>
            }
        </ul>
    }
    else
    {
        <p>No matching users found.</p>
    }
}

@code {
    [Parameter]
    public string UserIds { get; set; } = string.Empty;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private List<ApplicationUser> Users { get; set; } = new List<ApplicationUser>();
    private Dictionary<string, bool> invitationSent = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext == null)
        {
            HttpContext = HttpContextAccessor.HttpContext;
        }
        var userIdList = UserIds.Split(',').ToList();

        Users = await DbContext.Users
            .Where(u => userIdList.Contains(u.Id))
            .ToListAsync();
    }

    private async Task SendInvite(ApplicationUser user)
    {
        var notificationForReceiver = new Notification
            {
                SenderId = UserManager.GetUserId(HttpContext.User),
                ReceiverId = user.Id,
                Message = $"You have been invited by {UserManager.GetUserAsync(HttpContext.User).Result.UserName} to join a chat."
            };

        var notificationForSender = new Notification
            {
                SenderId = UserManager.GetUserId(HttpContext.User),
                ReceiverId = UserManager.GetUserId(HttpContext.User),
                Message = $"Your invitation to {user.UserName} has been sent.",
                Status = "Sent"
            };

        DbContext.Notifications.AddRange(notificationForReceiver, notificationForSender);
        await DbContext.SaveChangesAsync();

        // Устанавливаем статус отправки приглашения в true для данного пользователя
        invitationSent[user.Id] = true;
    }
}