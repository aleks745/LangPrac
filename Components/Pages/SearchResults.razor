@page "/search-results/{UserIds}"

@using LangPrac.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject IChatService chatService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor

<style>
    body {
        overflow-x: hidden;
        overflow-y: hidden;
    }

    .page {
        background: url('searchbg.png') no-repeat center center fixed !important;
        background-size: cover !important;
        background-attachment: fixed !important;
        min-height: 100vh !important;
        width: 100vw !important;
        font-size: 2.1vh;
    }

    .results-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 60vh;
        max-width: 25vw;
        margin: 0vh auto;
        padding: 6.7vh;
        border-radius: 1.3vh;
        background-color: #184f78;
        box-shadow: 0 0 1.3vh rgba(0, 0, 0, 0.1);
        color: #ffffff;
        position: relative;
    }

    .card {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 90%;
        background-color: #7E8D85;
        padding: 2.7vh;
        border-radius: 0.7vh;
        box-shadow: 0 0.3vh 0.5vh rgba(0, 0, 0, 0.2);
        border: 0.2vh solid #ffffff;
    }

        .card img {
            width: 6vw;
            height: 6vw;
            border-radius: 50%;
            margin-bottom: 1.3vh;
            box-shadow: 0 0.3vh 0.5vh rgba(0, 0, 0, 0.2);
        }

        .card div {
            flex-grow: 1;
        }

        .card .info {
            text-align: center;
            font-size: 1.9vh;
        }

    .avatar-placeholder {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8em;
        color: darkgrey;
    }

    .btn-invite {
        padding: 1.1vh 2.1vw;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 0.7vh;
        font-weight: bold;
        cursor: pointer;
        margin-top: 1.3vh;
        box-shadow: 0 0.3vh 0.5vh rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s;
    }

        .btn-invite:hover {
            background-color: #45a049;
        }

    .btn-find-more {
        padding: 1.1vh 2.1vw;
        background-color: #FC7753;
        color: #FFFFFF;
        border: none;
        border-radius: 0.7vh;
        cursor: pointer;
        font-weight: bold;
        margin-top: 2.6vh;
        box-shadow: 0 0.3vh 0.5vh rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s;
    }

        .btn-find-more:hover {
            background-color: #E36847;
        }

    .no-more-partners {
        color: #ffd700;
        text-align: center;
        padding: 1.3vh;
        font-size: 2.1vh;
    }

    .back-to-search {
        position: absolute;
        top: 1.3vh;
        right: 1.3vw;
        padding: 0.7vh 1.3vw;
        background-color: #1a8ec2;
        color: white;
        border-radius: 0.7vh;
        cursor: pointer;
        border: none;
        box-shadow: 0 0.3vh 0.5vh rgba(0, 0, 0, 0.2);
        transition: background-color 0.3s;
    }

        .back-to-search:hover {
            background-color: #167aa5;
        }

    .language-info {
        text-align: left;
        color: #d0e8ff;
        margin-top: 1.3vh;
    }

    .language {
        background-color: #2c3e50;
        padding: 0.7vh;
        width: 11vw;
        border-radius: 0.5vh;
        margin: 0.3vh 0;
        color: white;
        font-weight: bold;
        font-size: 1.7vh;
        box-shadow: 0 0.2vh 0.4vh rgba(0, 0, 0, 0.1);
    }

    .invitation-sent {
        display: block;
        background-color: #4CAF50;
        color: white;
        text-align: center;
        padding: 1.1vh 2.1vw;
        border-radius: 0.7vh;
        font-size: 1.9vh;
        margin-top: 1.3vh;
        box-shadow: 0 0.3vh 0.5vh rgba(0, 0, 0, 0.2);
    }

    .loading-animation {
        border: 0.5vh solid #f3f3f3;
        border-radius: 50%;
        border-top: 0.5vh solid #3498db;
        width: 4vw;
        height: 4vw;
        -webkit-animation: spin 2s linear infinite;
        animation: spin 2s linear infinite;
    }

    .rating-info {
        margin-top: 1.3vh;
        font-size: 1.9vh;
        color: #ffd700;
    }

        .rating-info .count {
            color: #ffffff;
        }

    /* Safari */
    @@-webkit-keyframes spin {
        0% {
            -webkit-transform: rotate(0deg);
        }

        100% {
            -webkit-transform: rotate(360deg);
        }
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

<PageTitle>LаngPrac</PageTitle>

<div class="results-container">
    <button class="back-to-search" @onclick="GoBack">Назад</button>
    @if (!string.IsNullOrEmpty(searchMessage) && searchMessage == "Партнерів більше не знайдено.")
    {
        <div class="no-more-partners">@searchMessage</div>
    }
    else if (isLoading)
    {
        <div class="loading-animation"></div>
    }
    else if (CurrentUser != null)
    {
        <div class="card">
            <div>
                @if (CurrentUser.AvatarImage != null)
                {
                    <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(CurrentUser.AvatarImage)}")" alt="Avatar" />
                }
                else
                {
                    <div class="avatar-placeholder">Без аватарки</div>
                }
            </div>
            <div class="info">
                <strong>@CurrentUser.Nickname</strong> <br />
                Країна: @(!string.IsNullOrEmpty(CurrentUser?.Country) ? CurrentUser.Country : "Невідомо") <br />
                Стать: @(!string.IsNullOrEmpty(CurrentUser?.Gender) ? CurrentUser.Gender : "Невідомо") <br />
                <span>Вік: @(CalculateAge(CurrentUser?.DateOfBirth)?.ToString() ?? "Невідомо")</span> <br />
                <div class="language-info">
                    <strong>Мови, які знає:</strong>
                    @if (CurrentUser?.UserLanguages?.Any(ul => ul.LanguageType == "Knows") == true)
                    {
                        @foreach (var lang in CurrentUser?.UserLanguages?.Where(ul => ul.LanguageType == "Knows"))
                        {
                            <div class="language">@lang?.Language.LanguageName (@lang?.LanguageLvl.GetEnumMemberValue())</div>
                        }
                    }
                    <strong>Мови, які вивчає:</strong>
                    @if (CurrentUser?.UserLanguages != null && CurrentUser.UserLanguages.Any(ul => ul.LanguageType == "Wants to Learn"))
                    {
                        foreach (var lang in CurrentUser.UserLanguages.Where(ul => ul.LanguageType == "Wants to Learn"))
                        {
                            if (lang.Language != null && lang.LanguageLvl != null)
                            {
                                <div class="language">@lang.Language.LanguageName (@lang.LanguageLvl.GetEnumMemberValue())</div>
                            }
                        }
                    }
                </div>
                <div class="rating-info">
                    <strong>Рейтинг: </strong>
                    @if (CurrentUser.HasRatings)
                    {
                        <span>@CurrentUser.AverageRating</span> <br />
                        <span class="count">Кількість оцінок: @CurrentUser.RatingCount</span>
                    }
                    else
                    {
                        <span>Немає оцінок</span>
                    }
                </div>
                @if (UserChats.Any(c => (c.User1Id == CurrentUser.Id && c.User2Id == UserManager.GetUserId(HttpContext.User)) ||
               (c.User2Id == CurrentUser.Id && c.User1Id == UserManager.GetUserId(HttpContext.User))))
                {
                    <span>Чат із цим користувачем уже існує</span>
                }
                else if (invitationSent.ContainsKey(CurrentUser?.Id) && invitationSent[CurrentUser.Id])
                {
                    <span class="invitation-sent">Запрошено</span>
                }
                else
                {
                    <button class="btn-invite" @onclick="() => SendInvite(CurrentUser)">Запросити</button>
                }
            </div>
        </div>
        @if (!isLoading && searchMessage != "Партнерів більше не знайдено.")
        {
            <button class="btn-find-more" @onclick="FindMoreAsync">Знайти ще</button>
        }
    }
</div>

@code {
    [Parameter]
    public string UserIds { get; set; } = string.Empty;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private List<ApplicationUser> Users { get; set; } = new List<ApplicationUser>();
    private List<Chat> UserChats = new List<Chat>();
    private Dictionary<string, bool> invitationSent = new Dictionary<string, bool>();

    private ApplicationUser CurrentUser;
    private int currentIndex = 0;
    private string searchMessage = string.Empty;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext == null)
        {
            HttpContext = HttpContextAccessor.HttpContext;
        }

        var chatService = HttpContext.RequestServices.GetRequiredService<IChatService>();
        UserChats = await chatService.GetUserChatsAsync(UserManager.GetUserId(HttpContext.User));

        var userIdList = UserIds.Split(',').ToList();
        isLoading = true;
        UpdateState();

        await Task.Delay(1500);

        Users = await DbContext.Users
            .Where(u => userIdList.Contains(u.Id) && u.Id != UserManager.GetUserId(HttpContext.User))
            .Include(u => u.UserLanguages)
            .Include(u => u.UserRatings)
            .ToListAsync();

        if (Users.Any())
        {
            CurrentUser = Users.FirstOrDefault();
            isLoading = false;
        }
        else
        {
            searchMessage = "Відповідних партнерів не знайдено.";
            isLoading = false;
        }
        UpdateState();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/search");
    }

    private int? CalculateAge(DateOnly? dateOfBirth)
    {
        if (!dateOfBirth.HasValue)
        {
            return null; // Или возвращайте значение по умолчанию, если ожидается, что возраст всегда будет известен
        }

        var today = DateOnly.FromDateTime(DateTime.Today);
        var age = today.Year - dateOfBirth.Value.Year;
        // Если еще не было дня рождения в этом году, отнимаем один год
        if (dateOfBirth.Value.AddYears(age) > today)
        {
            age--;
        }
        return age;
    }

    private async Task FindMoreAsync()
    {
        isLoading = true;
        UpdateState();
        currentIndex++;
        if (currentIndex >= Users.Count)
        {
            searchMessage = "Партнерів більше не знайдено.";
            CurrentUser = null;
            isLoading = false;
            UpdateState();
            return;
        }
        await Task.Delay(1500);
        CurrentUser = Users[currentIndex];
        isLoading = false;
        UpdateState();
    }

    private void UpdateState()
    {
        StateHasChanged();
    }

    private async Task SendInvite(ApplicationUser user)
    {
        if (!invitationSent.ContainsKey(user.Id) || !invitationSent[user.Id])
        {
            var currentUser = await UserManager.GetUserAsync(HttpContext.User);
            await chatService.SendInviteWithDetails(currentUser, user);

            invitationSent[user.Id] = true;
        }
    }
}