@page "/search-results/{UserIds}"

@using LangPrac.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext DbContext
@inject IHttpContextAccessor HttpContextAccessor

<style>
    .avatar-image {
        width: 80px; /* размер аватара */
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 15px; /* отступ справа */
    }

    .list-group-item {
        display: flex;
        align-items: center;
        gap: 20px; /* Добавляет пространство между элементами */
        padding: 10px;
        border-bottom: 1px solid #ccc;
    }

        /* Стиль для текста внутри блоков */
        .list-group-item div {
            color: #333; /* темно-серый цвет текста */
            font-size: 14px; /* размер шрифта */
        }

    .avatar-placeholder, .avatar-image {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background-color: #eee; /* Фон для placeholder */
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.8em;
        color: darkgrey;
    }

</style>

<h3>Search Results</h3>

@if (Users != null)
{
    @if (Users.Count > 0)
    {
        <ul class="list-group">
            @foreach (var user in Users)
            {
                var userLanguages = user.UserLanguages; // предполагается, что UserLanguages уже загружены
                var knownLanguage = userLanguages.FirstOrDefault(ul => ul.LanguageType == "Knows");
                var wantsToLearnLanguage = userLanguages.FirstOrDefault(ul => ul.LanguageType == "Wants to Learn");
                <li class="list-group-item">
                    <div>
                        @if (user.AvatarImage != null)
                        {
                            <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(user.AvatarImage)}")" alt="Avatar" class="avatar-image" />
                        }
                        else
                        {
                            <div class="avatar-placeholder">No Avatar</div>
                        }
                    </div>
                    <div>
                        @user.UserName <br />
                        Country: @(!string.IsNullOrEmpty(user.Country) ? user.Country : "Unknown") <br />
                        Gender: @(!string.IsNullOrEmpty(user.Gender) ? user.Gender : "Unknown") <br />
                        @if (knownLanguage != null)
                        {
                            <span>@knownLanguage.Language.LanguageName (@knownLanguage.LanguageLvl.GetEnumMemberValue())</span> <br />
                        }
                        @if (wantsToLearnLanguage != null)
                        {
                            <span>wants to learn @wantsToLearnLanguage.Language.LanguageName (@wantsToLearnLanguage.LanguageLvl.GetEnumMemberValue())</span> <br />
                        }
                        <span>Age: @(CalculateAge(user.DateOfBirth)?.ToString() ?? "Unknown")</span> <br />
                        <button class="btn btn-primary" @onclick="() => SendInvite(user)" disabled="@(invitationSent.ContainsKey(user.Id) && invitationSent[user.Id])">Invite</button>
                        @if (invitationSent.ContainsKey(user.Id) && invitationSent[user.Id])
                        {
                            <span>Invitation sent!</span>
                        }
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p>No matching users found.</p>
    }
}


@code {
    [Parameter]
    public string UserIds { get; set; } = string.Empty;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private List<ApplicationUser> Users { get; set; } = new List<ApplicationUser>();
    private Dictionary<string, bool> invitationSent = new Dictionary<string, bool>();

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext == null)
        {
            HttpContext = HttpContextAccessor.HttpContext;
        }
        var userIdList = UserIds.Split(',').ToList();

        // Загрузка связанных данных о языках пользователя
        Users = await DbContext.Users
            .Where(u => userIdList.Contains(u.Id))
            .Include(u => u.UserLanguages) // Убедитесь, что UserLanguage связан с User через навигационное свойство
            .ToListAsync();
    }

    // Вспомогательный метод для расчета возраста пользователя
    private int? CalculateAge(DateOnly? dateOfBirth)
    {
        if (!dateOfBirth.HasValue)
        {
            return null; // Или возвращайте значение по умолчанию, если ожидается, что возраст всегда будет известен
        }

        var today = DateOnly.FromDateTime(DateTime.Today);
        var age = today.Year - dateOfBirth.Value.Year;
        // Если еще не было дня рождения в этом году, отнимаем один год
        if (dateOfBirth.Value.AddYears(age) > today)
        {
            age--;
        }
        return age;
    }


    private async Task SendInvite(ApplicationUser user)
    {
        var notificationForReceiver = new Notification
            {
                SenderId = UserManager.GetUserId(HttpContext.User),
                ReceiverId = user.Id,
                Message = $"You have been invited by {UserManager.GetUserAsync(HttpContext.User).Result.UserName} to join a chat."
            };

        var notificationForSender = new Notification
            {
                SenderId = UserManager.GetUserId(HttpContext.User),
                ReceiverId = UserManager.GetUserId(HttpContext.User),
                Message = $"Your invitation to {user.UserName} has been sent.",
                Status = "Sent"
            };

        DbContext.Notifications.AddRange(notificationForReceiver, notificationForSender);
        await DbContext.SaveChangesAsync();

        // Устанавливаем статус отправки приглашения в true для данного пользователя
        invitationSent[user.Id] = true;
    }
}