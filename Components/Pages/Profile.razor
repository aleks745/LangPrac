@page "/profile"
@using System.ComponentModel.DataAnnotations
@using LangPrac.Components.Account.Pages.Manage
@using Microsoft.AspNetCore.Identity
@using LangPrac.Data
@using LangPrac.Components.Account
@using Microsoft.EntityFrameworkCore
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using NetcodeHub.Packages.Components.Modal
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext
@inject IEmailSender<ApplicationUser> EmailSender
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ILogger<ChangePassword> Logger

<style>
    body {
        overflow-x: hidden;
    }

    .page {
        background: url('searchbg.png') no-repeat center center fixed !important;
        background-size: cover !important;
        background-attachment: fixed !important;
        min-height: 100vh !important;
        width: 100vw !important;
        font-size: 2.1vh;
    }

    .ppage {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .content-container {
        background-color: rgba(224, 224, 236, 0.9);
        padding: 2vh;
        border-radius: 1vh;
        box-shadow: 0 0.4vh 0.8vh rgba(0, 0, 0, 0.2);
        max-width: 60vw;
        width: 100%;
    }

    .elements {
        margin: 1vh;
        text-align: center;
    }

    .row {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    h1, h2, h3, h4, h5 {
        color: #252422;
    }

    .avatar-container {
        position: relative;
        width: 20vh;
        height: 20vh;
        border: 0.1vh solid #ccc;
        border-radius: 50%;
        overflow: hidden;
        margin-bottom: 2vh;
    }

    .avatar-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .avatar-placeholder {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
        background-color: #f8f9fa;
        color: #6c757d;
        font-size: 1.2vh;
    }

    .avatar-input {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }

    .form-floating {
        margin-bottom: 1vh;
    }

    .btn {
        margin-top: 1vh;
    }

    .input-group .form-control:disabled, .input-group .form-control[readonly] {
        background-color: #e9ecef;
    }

    .manage-buttons-container {
        display: flex;
        justify-content: space-between;
        width: 100%;
        margin-top: 1vh;
    }

    .btn-info, .btn-danger {
        margin: 1vh;
    }

    .modal-close-button {
        display: flex;
        justify-content: center;
        margin-top: 2vh;
        align-items: center;
        margin-right: 2.3vw;
    }

    .btn-manage-languages {
        background-color: #007bff;
        color: white;
        border-radius: 1vh;
        padding: 1vh 2vh;
        font-size: 2vh;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-manage-languages:hover {
            background-color: #0056b3;
        }

    .profile-email-container {
        display: flex;
        justify-content: space-between;
        width: 100%;
    }

    .profile-form, .email-form {
        width: 48%;
    }

    .languages-container {
        margin-top: 2vh;
        width: 50%;
        margin-left: auto;
        margin-right: auto;
        margin-bottom: 2vh;
    }

    .languages-list {
        margin-bottom: 2vh;
    }

    .form-floating {
        margin-bottom: 1vh;
    }

    .rating {
        margin-top: 1vh;
        font-size: 2vh;
        color: #f39c12;
    }

        .rating h5 {
            margin-top: 0.5vh;
            color: #555;
            font-size: 2vh;
        }

    .hidden-option {
        display: none;
    }
</style>

<PageTitle>LаngPrac</PageTitle>

<div class="ppage">
    <div class="content-container">
        @if (appUser != null)
        {
            <div class="elements">
                <div class="row">
                    <h4>@appUser.Nickname</h4>
                    <div class="avatar-container">
                        @if (appUser.AvatarImage is not null)
                        {
                            <img src="@($"data:image/jpeg;base64,{Convert.ToBase64String(appUser.AvatarImage)}")" alt="Avatar" class="avatar-image" />
                        }
                        else
                        {
                            <div class="avatar-placeholder">
                                <span style="font-size: 1em">Завантажити аватар</span>
                            </div>
                        }
                        <InputFile OnChange="@LoadAvatar" accept="image/*" class="avatar-input" />
                    </div>
                    <div class="rating">
                        @if (appUser.AverageRating == 0)
                        {
                            <h5>Користувача ще ніхто не оцінив</h5>
                        }
                        else
                        {
                            <h5>Рейтинг: @appUser.AverageRating</h5>
                            <h5>Кількість оцінок: @appUser.UserRatings.Count</h5>
                        }
                    </div>
                </div>
            </div>
        }
        else
        {
            <p>Користувач не знайдений.</p>
        }

            <div class="languages-container">
                <h3>Ваші мови</h3>
                <div class="row languages-list">
                    <div class="col-md-12">
                        @if (userLanguages.Count > 0)
                        {
                            <ul class="list-group">
                                @foreach (var userLanguage in userLanguages)
                                {
                                    <li @key="userLanguage.LanguageId" class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@userLanguage.Language.LanguageName</strong> - @userLanguage.LanguageLvl (@userLanguage.LanguageType)
                                        </div>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteUserLanguageAsync(userLanguage)">Видалити</button>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>Ви ще не додали жодної мови.</p>
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <EditForm Model="LanguageInput" OnValidSubmit="OnValidSubmitLanguagesAsync">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" role="alert" />
                            <div class="form-floating mb-3">
                                <InputSelect @bind-Value="LanguageInput.LanguageType" class="form-control">
                                    <option value="" class="hidden-option">Оберіть тип мови</option>
                                    <option value="Knows">Знаю</option>
                                    <option value="Wants to Learn">Хочу вивчати</option>
                                </InputSelect>
                                <label for="language-type" class="form-label">Тип мови</label>
                                <ValidationMessage For="() => LanguageInput.LanguageType" class="text-danger" />
                            </div>
                            <ValidationSummary class="text-danger" role="alert" />
                            <div class="form-floating mb-3">
                                <InputSelect @bind-Value="LanguageInput.LanguageId" class="form-control" required>
                                    <option value="" class="hidden-option">Оберіть мову</option>
                                    @foreach (var language in languages)
                                    {
                                        <option value="@language.LanguageId">@language.LanguageName</option>
                                    }
                                </InputSelect>
                                <label for="language" class="form-label">Мова</label>
                                <ValidationMessage For="() => LanguageInput.LanguageId" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <select @bind="selectedLanguageLvl" class="form-control">
                                    @foreach (var lvl in Enum.GetValues(typeof(LanguageLvl)))
                                    {
                                        var enumValue = (LanguageLvl)lvl;
                                        <option value="@enumValue">@enumValue.GetEnumMemberValue()</option>
                                    }
                                </select>
                                <label for="language-level" class="form-label">Рівень володіння мовою</label>
                                <ValidationMessage For="() => selectedLanguageLvl" class="text-danger" />
                            </div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary">Зберегти</button>
                        </EditForm>
                    </div>
                </div>
            </div>

            <div class="profile-email-container">
                <div class="profile-form">
                <h3>Особисті дані</h3>
                    <p>@profileMessage</p>
                    <EditForm Model="ProfileInput" OnValidSubmit="OnValidSubmitProfileAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="ProfileInput.Nickname" class="form-control" placeholder="Будь ласка, введіть ваше ім'я." />
                            <label for="nickname" class="form-label">Ім'я</label>
                            <ValidationMessage For="() => ProfileInput.Nickname" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                        <InputText @bind-Value="ProfileInput.PhoneNumber" class="form-control" placeholder="Будь ласка, введіть номер телефону." />
                            <label for="phone-number" class="form-label">Номер телефону</label>
                            <ValidationMessage For="() => ProfileInput.PhoneNumber" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputDate @bind-Value="ProfileInput.DateOfBirth" class="form-control" placeholder="Будь ласка, введіть дату народження."
                                       Min="@DateTime.Now.AddYears(-80).ToString("yyyy-MM-dd")" Max="@DateTime.Now.AddYears(-18).ToString("yyyy-MM-dd")" />
                            <label for="date-of-birth" class="form-label">Дата народження</label>
                            <ValidationMessage For="() => ProfileInput.DateOfBirth" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="ProfileInput.Country" class="form-control">
                                <option value="">Оберіть країну</option>
                                @foreach (var country in countries)
                                {
                                    <option value="@country">@country</option>
                                }
                            </InputSelect>
                            <label for="country" class="form-label">Країна</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="ProfileInput.Gender" class="form-control">
                                <option value="">Оберіть стать</option>
                                <option value="Чоловіча">Чоловіча</option>
                                <option value="Жіноча">Жіноча</option>
                                <option value="Інша">Інша</option>
                            </InputSelect>
                            <label for="gender" class="form-label">Стать</label>
                        </div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Зберегти</button>
                    </EditForm>
                </div>

                <div class="email-form">
                    <h3>Керування електронною поштою</h3>
                    <p>@emailMessage</p>
                    <EditForm Model="EmailInput" OnValidSubmit="OnValidSubmitEmailAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        <div class="form-floating mb-3 input-group">
                        <input type="text" value="@email" class="form-control" placeholder="Будь ласка, введіть свою електронну пошту." disabled />
                            <div class="input-group-append">
                                <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                            </div>
                            <label for="email" class="form-label">Електронна пошта</label>
                        </div>
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="EmailInput.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Будь ласка, введіть нову електронну адресу." />
                            <label for="new-email" class="form-label">Нова електронна пошта</label>
                            <ValidationMessage For="() => EmailInput.NewEmail" class="text-danger" />
                        </div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Змінити електронну пошту</button>
                    </EditForm>
                    <button class="btn btn-info" @onclick="OpenPasswordModal">Керування паролем</button>
                </div>
            </div>

            <Modal BootstrapClass="border-success" CustomStyle="width:40vw; border-radius: 1vh;" Open="IsPasswordModelOpen">
                <ContentContent>
                    <p class="text-center text-muted">
                    <h3>Змінити пароль</h3>
                    <p>@passwordMessage</p>
                    <div class="row">
                        <div class="col-md-6">
                            <EditForm Model="PasswordInput" FormName="change-password" OnValidSubmit="OnValidSubmitPasswordAsync">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" role="alert" />
                                <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="PasswordInput.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Будь ласка, введіть старий пароль." />
                                    <label for="old-password" class="form-label">Старий пароль</label>
                                    <ValidationMessage For="() => PasswordInput.OldPassword" class="text-danger" />
                                </div>
                                <div class="form-floating mb-3">
                                    <InputText type="password" @bind-Value="PasswordInput.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Будь ласка, введіть новий пароль." />
                                    <label for="new-password" class="form-label">Новий пароль</label>
                                    <ValidationMessage For="() => PasswordInput.NewPassword" class="text-danger" />
                                </div>
                                <div class="form-floating mb-3">
                                    <InputText type="password" @bind-Value="PasswordInput.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Будь ласка, підтвердіть ваш новий пароль." />
                                    <label for="confirm-password" class="form-label">Підтвердіть пароль</label>
                                    <ValidationMessage For="() => PasswordInput.ConfirmPassword" class="text-danger" />
                                </div>
                            <button type="submit" class="w-100 btn btn-lg btn-primary">Оновити пароль</button>
                            </EditForm>
                        </div>
                    </div>
                    </p>
                </ContentContent>
                <ButtonTemplate>
                    <div class="modal-close-button">
                        <button class="btn btn-danger btn-sm" @onclick="ClosePasswordModal">Закрити</button>
                    </div>
                </ButtonTemplate>
            </Modal>
    </div>
</div>

@code {
    private ApplicationUser appUser = default!;
    private string? username;
    private string? nickname;
    private string? phoneNumber;
    private DateOnly? dateOfBirth;
    private string? profileMessage;
    private string? emailMessage;
    private string? email;

    private ProfileInputModel ProfileInput { get; set; } = new ProfileInputModel();
    private LanguageInputModel LanguageInput { get; set; } = new LanguageInputModel();
    private EmailInputModel EmailInput { get; set; } = new EmailInputModel();
    private PasswordInputModel PasswordInput { get; set; } = new PasswordInputModel();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            throw new InvalidOperationException("User is not authenticated.");
        }

        appUser = await UserManager.GetUserAsync(user);
        if (appUser == null)
        {
            return;
        }

        username = await UserManager.GetUserNameAsync(appUser);
        phoneNumber = await UserManager.GetPhoneNumberAsync(appUser);
        nickname = appUser.Nickname;
        dateOfBirth = appUser.DateOfBirth;
        email = await UserManager.GetEmailAsync(appUser);

        languages = await DbContext.Languages.ToListAsync();
        await LoadUserLanguagesAsync();
        hasPassword = await UserManager.HasPasswordAsync(appUser);

        ProfileInput.Nickname ??= nickname;
        ProfileInput.PhoneNumber ??= phoneNumber;
        ProfileInput.DateOfBirth ??= dateOfBirth;
        ProfileInput.Country ??= appUser.Country;
        ProfileInput.Gender ??= appUser.Gender;
        EmailInput.NewEmail ??= email;

        appUser.UserRatings = await DbContext.PartnerRatings
            .Where(r => r.UserId == appUser.Id)
            .ToListAsync();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnValidSubmitProfileAsync()
    {
        if (appUser == null)
        {
            profileMessage = "Користувач не знайдений.";
            return;
        }

        bool needsReSignIn = false;

        if (appUser.Nickname != ProfileInput.Nickname)
        {
            appUser.Nickname = ProfileInput.Nickname;
            needsReSignIn = true;
        }
        if (appUser.PhoneNumber != ProfileInput.PhoneNumber)
        {
            appUser.PhoneNumber = ProfileInput.PhoneNumber;
            needsReSignIn = true;
        }
        if (appUser.DateOfBirth != ProfileInput.DateOfBirth)
        {
            appUser.DateOfBirth = ProfileInput.DateOfBirth;
            needsReSignIn = true;
        }
        if (appUser.Country != ProfileInput.Country)
        {
            appUser.Country = ProfileInput.Country;
            needsReSignIn = true;
        }
        if (appUser.Gender != ProfileInput.Gender)
        {
            appUser.Gender = ProfileInput.Gender;
            needsReSignIn = true;
        }

        if (needsReSignIn)
        {
            var updateResult = await UserManager.UpdateAsync(appUser);
            if (updateResult.Succeeded)
            {
                try
                {
                    await SignInManager.RefreshSignInAsync(appUser);
                    profileMessage = "Ваш профіль успішно оновлено";
                }
                catch (Exception ex)
                {
                    Logger.LogError("An error occurred while refreshing sign-in: {0}", ex);
                    profileMessage = "Ваш профіль успішно оновлено";
                }
            }
            else
            {
                profileMessage = "Помилка при оновлені користувача";
            }
        }
        else
        {
            profileMessage = "Змін не виявлено";
        }

        StateHasChanged();
    }

    private async Task OnValidSubmitEmailAsync()
    {
        if (appUser == null)
        {
            emailMessage = "Користувач не знайдений.";
            return;
        }

        if (EmailInput.NewEmail is null || EmailInput.NewEmail == email)
        {
            emailMessage = "Ваш email не змінився";
            return;
        }

        var userWithNewEmail = await UserManager.FindByEmailAsync(EmailInput.NewEmail);
        if (userWithNewEmail != null)
        {
            emailMessage = "Email вже зайнятий";
            return;
        }

        appUser.Email = EmailInput.NewEmail;
        appUser.UserName = EmailInput.NewEmail;
        var updateResult = await UserManager.UpdateAsync(appUser);

        if (updateResult.Succeeded)
        {
            emailMessage = "Email успішно оновлений";
        }
        else
        {
            emailMessage = "Помилка при оновлені email";
        }
    }

    private List<Language> languages = new List<Language>();
    private List<UserLanguage> userLanguages = new List<UserLanguage>();
    private LanguageLvl selectedLanguageLvl = LanguageLvl.A1;

    private async Task OnValidSubmitLanguagesAsync()
    {
        if (appUser == null || appUser.Id == null)
        {
            Logger.LogError("User or User ID is null");
            return;
        }

        if (LanguageInput.LanguageId == 0)
        {
            Logger.LogError("LanguageId is not selected");
            return;
        }

        var existingUserLanguage = await DbContext.UserLanguages
            .FirstOrDefaultAsync(ul => ul.UserId == appUser.Id && ul.LanguageId == LanguageInput.LanguageId);

        if (existingUserLanguage != null)
        {
            existingUserLanguage.LanguageLvl = selectedLanguageLvl;
            existingUserLanguage.LanguageType = LanguageInput.LanguageType;
        }
        else
        {
            var newUserLanguage = new UserLanguage
                {
                    UserId = appUser.Id,
                    LanguageId = LanguageInput.LanguageId,
                    LanguageLvl = selectedLanguageLvl,
                    LanguageType = LanguageInput.LanguageType
                };
            DbContext.UserLanguages.Add(newUserLanguage);
        }

        await DbContext.SaveChangesAsync();

        var updateResult = await UserManager.UpdateAsync(appUser);
        if (!updateResult.Succeeded)
        {
            await RedirectManager.RedirectToCurrentPageWithStatusAsync("Error: Failed to update the user.");
        }

        await LoadUserLanguagesAsync();
        StateHasChanged();
    }


    private async Task LoadUserLanguagesAsync()
    {
        if (appUser == null || appUser.Id == null)
        {
            Logger.LogError("User or User ID is null");
            return;
        }

        userLanguages = await DbContext.UserLanguages
            .Where(ul => ul.UserId == appUser.Id)
            .Include(ul => ul.Language)
            .ToListAsync();

        userLanguages = userLanguages
            .OrderByDescending(ul => ul.LanguageType == "Knows")
            .ThenBy(ul => ul.Language.LanguageName)
            .ToList();
    }

    private async Task DeleteUserLanguageAsync(UserLanguage userLanguage)
    {
        DbContext.UserLanguages.Remove(userLanguage);
        await DbContext.SaveChangesAsync();
        await LoadUserLanguagesAsync();
        StateHasChanged();
    }

    private string? passwordMessage;
    private bool hasPassword;

    private async Task OnValidSubmitPasswordAsync()
    {
        if (appUser == null)
        {
            passwordMessage = "Користувач не знайдений.";
            return;
        }

        var changePasswordResult = await UserManager.ChangePasswordAsync(appUser, PasswordInput.OldPassword, PasswordInput.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            passwordMessage = $"Помилка: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            StateHasChanged();
            return;
        }

        try
        {
            await SignInManager.RefreshSignInAsync(appUser);
            Logger.LogInformation("User changed their password successfully.");
            await RedirectManager.RedirectToCurrentPageWithStatusAsync("Your password has been changed");
        }
        catch (Exception ex)
        {
            Logger.LogError("An error occurred: {0}", ex);
            passwordMessage = "Помилка при оновлені паролю";
            StateHasChanged();
        }
    }

    public bool IsPasswordModelOpen { get; set; }
    void OpenPasswordModal() => IsPasswordModelOpen = true;
    void ClosePasswordModal() => IsPasswordModelOpen = false;

    private async Task LoadAvatar(InputFileChangeEventArgs e)
    {
        var maxAllowedSize = 5 * 1024 * 1024;

        using var memoryStream = new MemoryStream();
        await e.File.OpenReadStream(maxAllowedSize).CopyToAsync(memoryStream);

        if (memoryStream.Length > maxAllowedSize)
        {
            return;
        }

        var imageBytes = memoryStream.ToArray();
        var resizedImageBytes = await ResizeImageAsync(imageBytes, 200, 200);

        appUser.AvatarImage = resizedImageBytes;
        await UserManager.UpdateAsync(appUser);

        StateHasChanged();
    }

    private async Task<byte[]> ResizeImageAsync(byte[] imageBytes, int width, int height)
    {
        using var image = await Image.LoadAsync(new MemoryStream(imageBytes));
        image.Mutate(x => x.Resize(new Size(width, height)));

        using var outputStream = new MemoryStream();
        await image.SaveAsJpegAsync(outputStream);

        return outputStream.ToArray();
    }

    private sealed class ProfileInputModel
    {
        [Display(Name = "Nickname")]
        public string Nickname { get; set; }

        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        public DateOnly? DateOfBirth { get; set; }

        [Display(Name = "Country")]
        public string? Country { get; set; }

        [Display(Name = "Gender")]
        public string? Gender { get; set; }
    }

    private sealed class EmailInputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }

    private sealed class LanguageInputModel
    {
        [Required]
        [Display(Name = "Language")]
        public int LanguageId { get; set; }

        [Required]
        [Display(Name = "Language Level")]
        public LanguageLvl selectedLanguageLvl { get; set; }

        [Required]
        [Display(Name = "Language Type")]
        public string? LanguageType { get; set; }
    }

    private sealed class PasswordInputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Довжина {0} має бути не менше {2} і не більше {1} символів.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "Новий пароль і пароль підтвердження не збігаються.")]
        public string ConfirmPassword { get; set; } = "";
    }

    private List<string> countries = new List<string>
    {
       "Австралія",
       "Австрія",
       "Албанія",
       "Бельгія",
       "Болгарія",
       "Бразилія",
       "Велика Британія",
       "Греція",
       "Данія",
       "Єгипет",
       "Індія",
       "Ірландія",
       "Іспанія",
       "Італія",
       "Канада",
       "Китай",
       "Мексика",
       "Нідерланди",
       "Німеччина",
       "Норвегія",
       "Об'єднані Арабські Емірати",
       "Південна Корея",
       "Польща",
       "Португалія",
       "Румунія",
       "Сербія",
       "Словенія",
       "Сполучені Штати Америки",
       "Таїланд",
       "Туреччина",
       "Угорщина",
       "Україна",
       "Фінляндія",
       "Франція",
       "Хорватія",
       "Чеська Республіка",
       "Швейцарія",
       "Швеція",
       "Шотландія",
       "Японія"
    };
}

<script>
    window.createImageElement = function () {
        return document.createElement('img');
    };
</script>
