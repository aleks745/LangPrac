@page "/search"

@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using LangPrac.Data
@using LangPrac.Components.Account
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
    .page {
        background: url('searchbg.png') no-repeat center center fixed !important;
        background-size: cover !important;
        background-attachment: fixed !important;
        min-height: 100vh !important;
        width: 100vw !important;
        font-size: 2.1vh;
    }

    .search-message {
        position: fixed;
        top: -3.5vh;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1000;
        background-color: #ffd700;
        color: #000;
        padding: 1.4vh 2.7vw;
        border-radius: 0.7vh;
        box-shadow: 0 0.5vh 0.7vh rgba(0,0,0,0.1);
        display: block;
        opacity: 0;
        transition: opacity 0.5s, top 0.5s;
    }

        .search-message.show {
            opacity: 1;
            top: 3vh; /* Окончательное положение ниже, чтобы сообщение было видно */
        }

    .search-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        min-height: 60vh;
        max-width: 25vw;
        margin: 0 auto;
        padding: 2.7vh;
        border-radius: 1.3vh;
        background-color: #184f78;
        box-shadow: 0 0 1.3vh rgba(0, 0, 0, 0.1);
    }

        .search-container label {
            color: #ffffff;
            margin-bottom: 0.5vh;
            display: block;
        }

        .search-container input, .search-container select {
            background: linear-gradient(145deg, #1d6a96, #163d5e);
            color: #ffffff;
            border: 0.20vw solid #1a8ec2;
            padding: 1.0vh 1.4vw;
            border-radius: 1.1vh;
            outline: none;
            width: 100%;
            box-shadow: 0 0.5vh 0.7vh rgba(0, 0, 0, 0.1);
            transition: transform 0.3s, box-shadow 0.3s;
        }

            .search-container input:focus, .search-container select:focus {
                transform: scale(1.05);
                box-shadow: 0 0.8vh 1.1vh rgba(0, 0, 0, 0.15);
            }

        .search-container button {
            background-color: #1a8ec2;
            color: #ffffff;
            border: none;
            padding: 1.1vh 2.1vw;
            border-radius: 0.7vh;
            font-size: 2.1vh;
            cursor: pointer;
            transition: background-color 0.3s;
            margin: 1.3vh auto;
            display: block;
        }

            .search-container button:hover {
                background-color: #1378a4;
            }

        .search-container .age-checkbox-container {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            margin: 1.3vh 0;
        }

            .search-container .age-checkbox-container label {
                margin-right: 1.3vw;
                white-space: nowrap;
            }

            .search-container .age-checkbox-container input[type="checkbox"] {
                width: 1vw;
                height: 1vw;
            }

        .search-container select {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background-color: #163d5e;
        }

        .search-container option {
            background-color: #184f78;
            color: white;
        }

        .search-container .slider {
            -webkit-appearance: none;
            width: 100%;
            height: 1.1vh;
            border-radius: 1vh;
            background: #163d5e;
            outline: none;
            opacity: 0.7;
            transition: opacity .2s;
        }

            .search-container .slider:hover {
                opacity: 1;
            }

            .search-container .slider::-webkit-slider-thumb {
                -webkit-appearance: none;
                appearance: none;
                width: 1.2vw;
                height: 1.2vw;
                border-radius: 50%;
                background: #1a8ec2;
                cursor: pointer;
            }

            .search-container .slider::-moz-range-thumb {
                width: 1.2vw;
                height: 1.2vw;
                border-radius: 50%;
                background: #1a8ec2;
                cursor: pointer;
            }

        .search-container .double-slider {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.7vh;
        }

        .search-container .slider {
            width: 90%;
            margin: 0.7vh 0;
        }

    .mlabel {
        font-size: 3.1vh;
        color: #ffffff;
        text-shadow: 0 0 1.3vh rgba(0, 0, 0, 0.7);
        top: 9vh;
    }
</style>

@attribute [Authorize]

<div class="search-container">
    <h3 class="mlabel">Search</h3>
    @if (quickSearchVisible)
    {
        <button class="btn btn-primary" @onclick="QuickSearchAsync">Quick Search</button>
    }

    <button class="btn btn-primary" @onclick="ToggleAdvancedSearch">Advanced Search</button>

    @if (!string.IsNullOrEmpty(searchMessage))
    {
        <div class="search-message show">
            @searchMessage
        </div>
    }

    @if (showAdvancedSearch)
    {
        <div>
            <label for="languageToLearn">Language to Learn:</label>
            <select @bind="selectedLanguageId" id="languageToLearn">
                @foreach (var language in userLanguages.Where(ul => ul.LanguageType == "Wants to Learn"))
                {
                    <option value="@language.LanguageId">@language.Language.LanguageName</option>
                }
            </select>
            <br />

            <label for="partnerLanguageLevelFrom">Partner's Language Level From:</label>
            <select id="partnerLanguageLevelFrom" @bind="partnerLanguageLevelFrom">
                @foreach (LanguageLvl level in Enum.GetValues(typeof(LanguageLvl)))
                {
                    <option value="@level" selected="@(level == partnerLanguageLevelFrom)">@level.GetDescription()</option>
                }
            </select>
            <br />

            <label for="partnerLanguageLevelTo">Partner's Language Level To:</label>
            <select id="partnerLanguageLevelTo" @bind="partnerLanguageLevelTo">
                @foreach (LanguageLvl level in Enum.GetValues(typeof(LanguageLvl)))
                {
                    <option value="@level" selected="@(level == partnerLanguageLevelTo)">@level.GetDescription()</option>
                }
            </select>
            <br />

            @if (!anyAgeSelected)
            {
                <div class="double-slider">
                    <div class="double-slider">
                        <div>
                            <label for="ageFrom" style="font-size: 2vh;">Age From: @ageFrom</label>
                            <input type="range" id="ageFrom" min="18" max="100" value="@ageFrom" @oninput="UpdateAgeFrom" class="slider age-from">
                        </div>
                        <div>
                            <label for="ageTo" style="font-size: 2vh;">Age To: @ageTo</label>
                            <input type="range" id="ageTo" min="18" max="100" value="@ageTo" @oninput="UpdateAgeTo" class="slider age-to">
                        </div>
                    </div>
                </div>

            }

            <div class="age-checkbox-container">
                <label>Любой возраст</label>
                <input type="checkbox" @bind="anyAgeSelected" />
            </div>

            <label for="gender">Gender:</label>
            <select @bind="selectedGender" id="gender">
                <option value="">Any</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
            </select>

            <button class="btn btn-primary" @onclick="AdvancedSearchAsync">Search</button>
        </div>
    }
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private List<UserLanguage> userLanguages = new List<UserLanguage>();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private string searchMessage = "";
    private bool showAdvancedSearch = false;
    private bool quickSearchVisible = true;
    private int selectedLanguageId;
    private LanguageLvl partnerLanguageLevelFrom = LanguageLvl.A1;
    private LanguageLvl partnerLanguageLevelTo = LanguageLvl.C2;
    private int? ageFrom = 18;
    private int? ageTo = 100;
    private bool anyAgeSelected = true; // По умолчанию "Любой возраст" выбран
    private string selectedGender;


    protected override async Task OnInitializedAsync()
    {
        if (HttpContext == null)
        {
            HttpContext = HttpContextAccessor.HttpContext;
        }

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);

        userLanguages = await DbContext.UserLanguages
            .Include(ul => ul.Language)
            .Where(ul => ul.UserId == user.Id)
            .ToListAsync();
    }

    private void ToggleAdvancedSearch()
    {
        showAdvancedSearch = !showAdvancedSearch;
        quickSearchVisible = !quickSearchVisible;
        searchMessage = null;
    }

    private void UpdateAgeFrom(ChangeEventArgs e)
    {
        ageFrom = Convert.ToInt32(e.Value);
        if (ageFrom > ageTo)
        {
            ageTo = ageFrom;
        }
    }

    private void UpdateAgeTo(ChangeEventArgs e)
    {
        ageTo = Convert.ToInt32(e.Value);
        if (ageTo < ageFrom)
        {
            ageFrom = ageTo;
        }
    }

    private async Task QuickSearchAsync()
    {
        var knownLanguages = userLanguages
            .Where(ul => ul.LanguageType == "Knows")
            .Select(ul => ul.LanguageId)
            .ToList();

        var wantsToLearnLanguages = userLanguages
            .Where(ul => ul.LanguageType == "Wants to Learn")
            .Select(ul => ul.LanguageId)
            .ToList();

        var searchResults = await DbContext.Users
            .Where(u => u.Id != user.Id)
            .Where(u => u.UserLanguages.Any(ul =>
                wantsToLearnLanguages.Contains(ul.LanguageId) && ul.LanguageType == "Knows") &&
                u.UserLanguages.Any(ul =>
                knownLanguages.Contains(ul.LanguageId) && ul.LanguageType == "Wants to Learn"))
            .ToListAsync();

        if (searchResults.Count == 0)
        {
            searchMessage = "No matching users found.";
        }
        else
        {
            var userIds = searchResults.Select(u => u.Id).ToList();
            NavigationManager.NavigateTo($"search-results/{string.Join(",", userIds)}");
        }
    }

    private async Task AdvancedSearchAsync()
    {
        var today = DateOnly.FromDateTime(DateTime.Today);
        var query = DbContext.Users
            .Include(u => u.UserLanguages)
            .Where(u => u.Id != user.Id)
            .Where(u => u.UserLanguages.Any(ul => ul.LanguageId == selectedLanguageId &&
                                                  ul.LanguageType == "Knows" &&
                                                  ul.LanguageLvl >= partnerLanguageLevelFrom &&
                                                  ul.LanguageLvl <= partnerLanguageLevelTo));

        if (!anyAgeSelected)
        {
            query = query.Where(u => u.DateOfBirth.HasValue &&
                                     u.DateOfBirth.Value.AddYears(ageFrom.GetValueOrDefault(0)) <= today &&
                                     u.DateOfBirth.Value.AddYears(ageTo.GetValueOrDefault(150)) >= today);
        }

        // Фильтрация по полу с учетом пользователей с неуказанным полом
        if (!string.IsNullOrEmpty(selectedGender) && selectedGender != "Any")
        {
            query = query.Where(u => u.Gender == selectedGender);
        }
        else if (selectedGender == "Any")
        {
            query = query.Where(u => string.IsNullOrEmpty(u.Gender) || u.Gender == "Unknown" || u.Gender == "Male" || u.Gender == "Female" || u.Gender == "Other");
        }

        var users = await query.ToListAsync();

        if (users.Count == 0)
        {
            searchMessage = "No matching users found.";
        }
        else
        {
            var userIds = users.Select(u => u.Id).ToList();
            NavigationManager.NavigateTo($"search-results/{string.Join(",", userIds)}");
        }
    }
}

@* Для ползуников возраста *@
<script>
    var ageFromSlider = document.querySelector('.age-from');
    var ageToSlider = document.querySelector('.age-to');

    function updateRange() {
        if (parseInt(ageFromSlider.value) > parseInt(ageToSlider.value)) {
            ageToSlider.value = ageFromSlider.value;
        }
        if (parseInt(ageToSlider.value) < parseInt(ageFromSlider.value)) {
            ageFromSlider.value = ageToSlider.value;
        }
    }

    ageFromSlider.oninput = function () {
        updateRange();
    }
    ageToSlider.oninput = function () {
        updateRange();
    }
</script>

@* Для всплывающего сообщения *@
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const msg = document.querySelector('.search-message');
        if (msg) {
            // Показываем сообщение сразу после загрузки
            msg.classList.add('show');

            // Убираем сообщение через 5 секунд
            setTimeout(() => {
                msg.classList.remove('show'); // Сначала убираем класс для анимации
                msg.style.opacity = '0'; // Начинаем процесс исчезновения
                setTimeout(() => {
                    msg.style.display = 'none'; // Скрываем после завершения анимации
                }, 500); // Задержка должна соответствовать времени анимации
            }, 5000); // Показываем сообщение в течение 5 секунд
        }
    });
</script>
