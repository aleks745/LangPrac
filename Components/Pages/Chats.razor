@page "/chats"
@using LangPrac.Data
@using LangPrac.Services
@using System.Security.Claims
@using LangPrac.Components.Account
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext
@inject IChatService ChatService
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">

<style>
    body {
        overflow-y: hidden;
    }

    .page {
        background: url('searchbg.png') no-repeat center center fixed !important;
        background-size: cover !important;
        background-attachment: fixed !important;
        min-height: 100vh !important;
        width: 100vw !important;
        font-size: 2.1vh;
    }

    .chat-list-layout {
        display: flex;
        flex-direction: column;
        background-color: #2d3e50;
        border-radius: 2.22vh;
        font-family: 'Roboto', sans-serif;
        font-weight: 500;
    }

    .chat-list-header {
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1.11vh 2.22vw;
        background-color: #2d3e50;
        color: white;
        font-size: 2.5vh;
        font-weight: bold;
        min-height: 8vh;
    }

    .chat-list-container {
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        overflow-x: hidden;
        height: 77vh;
        padding: 1.11vh 2.22vw;
        background-color: #53618b;
        color: #ffffff;
    }

        .chat-list-container::-webkit-scrollbar {
            width: 0.28vw;
        }

        .chat-list-container::-webkit-scrollbar-track {
            background: #aaa;
            border-radius: 1.11vh;
        }

        .chat-list-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 1.11vh;
        }

            .chat-list-container::-webkit-scrollbar-thumb:hover {
                background: #555;
            }

    .chat-list-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1.11vh 2.22vw;
        background-color: #2d3e50;
        color: white;
        border-radius: 1.11vh;
        margin-bottom: 1.11vh;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .chat-list-item:hover {
            background-color: #3b4a63;
        }

    .chat-content {
        flex-grow: 1;
    }

    .delete-chat-button {
        background-color: #e57373;
        border: none;
        border-radius: 1.11vh;
        cursor: pointer;
        padding: 0.5vh 1.1vh;
    }

    .chat-info {
        display: flex;
        justify-content: space-between;
        margin-top: 0.5vh;
        font-size: 1.8vh;
        color: #cccccc;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100vw;
        height: 100vh;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
        padding-top: 10vh;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 1.5vh 1.5vw;
        border: 1vh solid #888;
        width: 34vw;
        border-radius: 1.5vh;
        box-shadow: 0 0.5vh 1vh rgba(0, 0, 0, 0.2);
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 2.5vh;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
        }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1vh;
    }

    .modal-title {
        font-size: 2.5vh;
    }

    .modal-body {
        font-size: 2vh;
    }

    .modal-footer {
        display: flex;
        justify-content: space-between;
    }

    .btn-upgrade,
    .btn-rate,
    .btn-delete {
        padding: 1vh 2vw;
        font-size: 2vh;
        border-radius: 1vh;
        cursor: pointer;
        border: none;
    }

    .btn-upgrade {
        background-color: #28a745;
        color: white;
    }

        .btn-upgrade:hover {
            background-color: #218838;
        }

    .btn-rate {
        background-color: #b38600;
        color: white;
    }

        .btn-rate:hover {
            background-color: #8b6900;
        }

    .btn-rate-confirm {
        background-color: #007bff;
        color: white;
    }

        .btn-rate-confirm:hover {
            background-color: #0056b3;
        }

    .btn-delete {
        background-color: #dc3545;
        color: white;
    }

        .btn-delete:hover {
            background-color: #c82333;
        }
</style>

<div class="chat-list-layout">
    <div class="chat-list-header">
        Chats
    </div>
    <div class="chat-list-container">
        @foreach (var chat in UserChats)
        {
            <div class="chat-list-item">
                <div class="chat-content" @onclick="() => NavigateToChat(chat.Id)">
                    <span>Chat with @GetOtherUserName(chat)</span>
                    <div class="chat-info">
                        <span style="font-size: 1.5vh">Created: @chat.CreatedDate.ToString("dd.MM.yyyy")</span>
                    </div>
                </div>
                <button class="delete-chat-button" @onclick:stopPropagation @onclick="() => ShowEndPracticeModal(chat.Id)">Закончить практику</button>
            </div>
        }
    </div>
</div>

<div id="endPracticeModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Завершение практики</h2>
            <span class="close" @onclick="CloseEndPracticeModal">&times;</span>
        </div>
        <div class="modal-body">
            <p>Вы хотите повысить уровень языка?</p>
            <p>После оценки партнера чат будет автоматически удален.</p>
        </div>
        <div class="modal-footer">
            <button class="btn-upgrade" @onclick="UpgradeLanguageLevel">Повысить уровень языка</button>
            @if (IsPartnerRated)
            {
                <span>Вы оценили партнера</span>
            }
            else
            {
                <button class="btn-rate" @onclick="ShowRatePartnerModal">Оценить партнера</button>
            }
            <button class="btn-delete" @onclick="ConfirmDeleteChat">Удалить чат</button>
        </div>
    </div>
</div>

<div id="ratePartnerModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Оценка партнера</h2>
            <span class="close" @onclick="CloseRatePartnerModal">&times;</span>
        </div>
        <div class="modal-body">
            <p>Поставьте оценку вашему партнеру:</p>
            <select @bind="SelectedRating">
                @for (int i = 1; i <= 5; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>
        <div class="modal-footer">
            <button class="btn-rate-confirm" @onclick="SubmitRating">Оценить</button>
        </div>
    </div>
</div>

@code {
    private List<Chat> UserChats = new List<Chat>();
    private string CurrentUserId;
    private int ChatIdToDelete;

    private bool IsRatePartnerModalOpen = false;
    private bool IsPartnerRated = false;
    private int SelectedRating = 1;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext.User.Identity.IsAuthenticated)
        {
            CurrentUserId = httpContext.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (CurrentUserId != null)
            {
                UserChats = await ChatService.GetUserChatsAsync(CurrentUserId) ?? new List<Chat>();
            }
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private string GetOtherUserName(Chat chat)
    {
        if (chat.User1 != null && chat.User2 != null)
        {
            return chat.User1Id == CurrentUserId ? chat.User2.UserName : chat.User1.UserName;
        }
        return string.Empty;
    }

    private void NavigateToChat(int chatId)
    {
        NavigationManager.NavigateTo($"/chat/{chatId}");
    }

    private void ShowEndPracticeModal(int chatId)
    {
        ChatIdToDelete = chatId;
        JSRuntime.InvokeVoidAsync("eval", "document.getElementById('endPracticeModal').style.display='block'");
    }

    private void CloseEndPracticeModal()
    {
        JSRuntime.InvokeVoidAsync("eval", "document.getElementById('endPracticeModal').style.display='none'");
    }

    private void ShowRatePartnerModal()
    {
        IsRatePartnerModalOpen = true;
        JSRuntime.InvokeVoidAsync("eval", "document.getElementById('ratePartnerModal').style.display='block'");
    }

    private void CloseRatePartnerModal()
    {
        IsRatePartnerModalOpen = false;
        JSRuntime.InvokeVoidAsync("eval", "document.getElementById('ratePartnerModal').style.display='none'");
    }

    private async Task SubmitRating()
    {
        var chat = await ChatService.GetChatAsync(ChatIdToDelete);
        var partnerId = chat.User1Id == CurrentUserId ? chat.User2Id : chat.User1Id;
        await ChatService.RatePartnerAsync(partnerId, SelectedRating, 0);
        IsPartnerRated = true;
        CloseRatePartnerModal();
        await DeleteChat(ChatIdToDelete);
    }


    private void UpgradeLanguageLevel()
    {
        NavigationManager.NavigateTo("/profile");
    }

    private async Task ConfirmDeleteChat()
    {
        await DeleteChat(ChatIdToDelete);
    }

    private async Task DeleteChat(int chatId)
    {
        var chat = await ChatService.GetChatAsync(chatId);
        var partnerId = chat.User1Id == CurrentUserId ? chat.User2Id : chat.User1Id;

        if (partnerId != null)
        {
            await ChatService.CreateEndPracticeNotification(CurrentUserId, partnerId);
        }

        await ChatService.DeleteChatAsync(chatId);
        UserChats = await ChatService.GetUserChatsAsync(CurrentUserId);
        CloseEndPracticeModal();
        StateHasChanged();
    }
}
