@page "/chat/{ChatId}"
@using LangPrac.Data
@using LangPrac.Services
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@inject IJSRuntime JSRuntime
@inject IChatService ChatService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<style>
body {
    overflow-y: hidden; /* Запрет прокрутки и скрытие скроллбара */
}

.page {
    background: url('searchbg.png') no-repeat center center fixed !important;
    background-size: cover !important;
    background-attachment: fixed !important;
    min-height: 100vh !important;
    width: 100vw !important;
    font-size: 2.1vh;
}

.chat-layout {
    display: flex;
    flex-direction: column;
    height: 85vh;
    background-color: #2d3e50;
    border-radius: 2.22vh;
}

.chat-header {
    display: flex;
    align-items: center;
    padding: 1.11vh 2.22vw;
    background-color: #2d3e50;
    color: white;
    font-size: 2.5vh;
    font-weight: bold;
}

.chat-header .delete-chat-button {
    margin-left: auto;
    padding: 1.11vh 2.22vh;
    background-color: #e57373;
    border: none;
    border-radius: 1.11vh;
    cursor: pointer;
}

.chat-container {
    display: flex;
    flex-direction: column;
    overflow-y: auto;
        overflow-x: hidden;
    height: 74vh;
    padding: 1.11vh 2.22vw;
    background-color: #53618b;
    color: #ffffff;
}

.chat-container::-webkit-scrollbar {
    width: 0.28vw; /* ширина полосы прокрутки */
}

.chat-container::-webkit-scrollbar-track {
    background: #aaa; /* светло-синий цвет дорожки */
    border-radius: 1.11vh;
}

.chat-container::-webkit-scrollbar-thumb {
    background: #888; /* зеленый цвет ползунка */
    border-radius: 1.11vh;
}

.chat-container::-webkit-scrollbar-thumb:hover {
    background: #555; /* темно-зеленый цвет ползунка при наведении */
}

.message {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 70%;
    padding: 0.89vh 1.78vh;
    margin-bottom: 1.11vh;
    border-radius: 2.22vh;
    word-wrap: break-word; /* Перенос слов */
    overflow-wrap: break-word; /* Перенос слов */
    word-break: break-all; /* Перенос длинных слов */
}

.user-message {
    background-color: #4caf50; /* Зеленый цвет для сообщений пользователя */
    margin-left: auto; /* Выравнивание справа */
    animation: slideInFromRight 0.5s forwards;
}

.partner-message {
    background-color: #82ccdd;
    color: #ffffff; /* Цвет текста */
    margin-right: auto; /* Выравнивание слева */
    animation: slideInFromLeft 0.5s forwards;
}

.timestamp {
    position: absolute;
    right: 0;
    bottom: -15px;
    color: black;
    font-size: 10px;
}

    .card-footer {
        border-radius: 0 0 15px 15px !important;
        border-top: 0 !important;
        background-color: #53618b;
    }

    .type_msg {
        background-color: rgba(0, 0, 0, 0.3) !important;
        border: 0 !important;
        color: white !important;
        height: 60px !important;
        overflow-y: auto;
    }

        .type_msg:focus {
            box-shadow: none !important;
            outline: 0px !important;
        }

    .send_btn {
        border-radius: 0 25px 25px 0 !important;
        background-color: rgba(0, 0, 0, 0.3) !important;
        border: 0 !important;
        color: white !important;
        cursor: pointer;
        padding: 0 15px !important;
        display: flex;
        align-items: center;
        justify-content: center;
    }

        .send_btn i {
            font-size: 20px; /* Размер иконки */
            color: white; /* Цвет иконки */
        }


    .input-group-prepend,
    .input-group-append {
        display: flex;
        // Ensure buttons are always above inputs for more visually pleasing borders. // This isn't needed for `.input-group-text` since it shares the same border-color // as our inputs. .btn

    {
        position: relative;
        z-index: 2;
    }

@@keyframes slideInFromRight {
    0% {
        transform: translateX(100%);
        opacity: 0;
    }
    100% {
        transform: translateX(0);
        opacity: 1;
    }
}

@@keyframes slideInFromLeft {
    0% {
        transform: translateX(-100%);
        opacity: 0;
    }
    100% {
        transform: translateX(0);
        opacity: 1;
    }

}

</style>

<div class="chat-layout">
    <div class="chat-header">
        <span>@PartnerName</span> <!-- Используйте имя собеседника здесь -->
        <button class="delete-chat-button" @onclick="DeleteChat">Delete Chat</button>
    </div>

    <div class="chat-container" id="chatContainer">
        @foreach (var message in Messages)
        {
            <div class="@($"message {(message.SenderId == CurrentUserId ? "user-message" : "partner-message")}")">
                <div>
                    <strong>@message.Sender.Nickname:</strong> @message.Content
                </div>
                <span class="timestamp">@message.Timestamp.ToLocalTime().ToString("HH:mm")</span>
            </div>
        }
    </div>
    <div class="card-footer">
        <div class="input-group">
            <textarea name="" class="form-control type_msg" placeholder="Type your message..." type="text" @bind="NewMessage" @onkeypress="HandleKeyPress"></textarea>
            <div class="input-group-append">
                <span class="input-group-text send_btn" @onclick="SendMessage">
                    <i class="fas fa-location-arrow"></i>
                </span>
            </div>
        </div>
    </div>

</div>

@code {
    [Parameter]
    public string ChatId { get; set; }
    private HubConnection hubConnection;
    private List<ChatMessage> Messages = new List<ChatMessage>();
    private string NewMessage = string.Empty;
    private string CurrentUserId;
    private string PartnerName;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext.User.Identity.IsAuthenticated)
        {
            CurrentUserId = httpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", async (userId, message) =>
            {
                var sender = await UserManager.FindByIdAsync(userId);
                var msg = new ChatMessage
                    {
                        SenderId = userId,
                        Content = message,
                        Timestamp = DateTime.UtcNow,
                        Sender = sender
                    };
                Messages.Add(msg);
                await InvokeAsync(StateHasChanged);
                await JSRuntime.InvokeVoidAsync("scrollToBottom");
            });

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinChat", int.Parse(ChatId));

            var chat = await ChatService.GetChatAsync(int.Parse(ChatId));
            Messages = chat.Messages.ToList();

            var partner = chat.User1Id == CurrentUserId ? chat.User2 : chat.User1;
            PartnerName = partner?.Nickname ?? "Chat";
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(NewMessage))
        {
            await hubConnection.InvokeAsync("SendMessage", int.Parse(ChatId), CurrentUserId, NewMessage);
            NewMessage = string.Empty;
            await ScrollToBottom(); // Вызов прокрутки после отправки сообщения
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(NewMessage))
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatContainer");
    }

    private async Task DeleteChat()
    {
        await ChatService.DeleteChatAsync(int.Parse(ChatId));
        NavigationManager.NavigateTo("/chats");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("LeaveChat", int.Parse(ChatId));
            await hubConnection.DisposeAsync();
        }
    }
}

@* Скрипт для прокрутки страницы вниз при написании нового сообщения *@
<script>
    function scrollToBottom() {
        setTimeout(function () {
            var element = document.getElementById('chatContainer');
            element.scrollTop = element.scrollHeight;
        }, 100); // Задержка в 100 миллисекунд
    }
</script>
