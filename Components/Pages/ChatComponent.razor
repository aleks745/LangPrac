@page "/chat/{ChatId}"
@using LangPrac.Data
@using LangPrac.Services
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@inject IJSRuntime JSRuntime
@inject IChatService ChatService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
body {
    overflow-y: hidden; /* Запрет прокрутки и скрытие скроллбара */
}

/* Родительский контейнер для всего чата, занимающий всю высоту экрана за вычетом заголовка и строки ввода */
.chat-layout {
    display: flex;
    flex-direction: column;
    height: 100vh; /* Используйте высоту всего видимого экрана */
}

.chat-container {
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    height: 540px; /* Регулируйте высоту по вашему усмотрению */
    padding: 10px;
}
        /* Стилизация полосы прокрутки */
        .chat-container::-webkit-scrollbar {
            width: 10px; /* ширина полосы прокрутки */
        }

        .chat-container::-webkit-scrollbar-track {
            background: #f1f1f1; /* цвет дорожки */
            border-radius: 10px;
        }

        .chat-container::-webkit-scrollbar-thumb {
            background: #888; /* цвет ползунка */
            border-radius: 10px;
        }

            .chat-container::-webkit-scrollbar-thumb:hover {
                background: #555; /* цвет ползунка при наведении */
            }

.message {
    max-width: 70%;
    padding: 8px 16px;
    margin-bottom: 10px;
    border-radius: 20px;
    color: white;
    word-wrap: break-word; /* Обеспечивает перенос строк внутри блока */
}

.user-message {
    background-color: #0B93F6; /* Синий цвет для сообщений пользователя */
    margin-left: auto; /* Выравнивание справа */
    animation: slideInFromRight 0.5s ease-out;
}

.partner-message {
    background-color: #E5E5EA;
    color: black; /* Цвет текста для лучшей читаемости */
    margin-right: auto; /* Выравнивание слева */
    animation: slideInFromLeft 0.5s ease-out;
}

/* Стилизация заголовка чата */
.chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 5px 10px; /* Уменьшено с 10px до 5px */
}

.btn-danger {
    background-color: red; /* Ярко-красный цвет для кнопки удаления */
    color: white;
}

.btn-send {
    background-image: linear-gradient(to right, #4caf50 0%, #087f23 100%); /* Зеленый градиент для кнопки отправки */
    color: white;
}

.timestamp {
    display: block;
    font-size: 0.75rem;
    opacity: 0.75;
    text-align: right;
}

.chat-input {
    display: flex;
    justify-content: center;
    padding: 15px;
    border-radius: 15px;
    margin: 0 10px; /* Добавьте поля, чтобы оставить немного свободного пространства от краев контейнера чата */
    gap: 10px; /* Добавляет пространство между элементами формы */
}

    .chat-input input[type="text"] {
        width: 80%;
        padding: 10px 15px;
        border: 1px solid #ccc;
        border-radius: 15px;
        font-size: 1rem;
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
    }

button {
    border: none;
    padding: 10px 20px;
    border-radius: 15px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.3s;
}

.delete-chat-button {
    position: absolute;
    top: 10px;
    right: 10px;
}

    <style>
        @@keyframes slideInFromRight {
            0% {
                transform: translateX(100%);
                opacity: 0;
            }
            100% {
                transform: translateX(0);
                opacity: 1;
            }
        }
        @@keyframes slideInFromLeft {
            0% {
                transform: translateX(-100%);
                opacity: 0;
            }
            100% {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </style>
</style>

<div class="chat-layout">
    <div class="chat-header">
        <h3>Chat</h3>
        <button class="btn btn-danger" @onclick="DeleteChat">Delete Chat</button>
    </div>

    <div class="chat-container" id="chatContainer">
        @foreach (var message in Messages)
        {
            <div class="@($"message {(message.SenderId == CurrentUserId ? "user-message" : "partner-message")}")">
                <strong>@message.Sender.Nickname:</strong> @message.Content
                <span class="timestamp">@message.Timestamp.ToLocalTime().ToString("HH:mm")</span>
            </div>
        }
    </div>

    <div class="chat-input">
        <input type="text" @bind="NewMessage" @onkeypress="HandleKeyPress" />
        <button class="btn btn-send" @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    [Parameter]
    public string ChatId { get; set; }
    private HubConnection hubConnection;
    private List<ChatMessage> Messages = new List<ChatMessage>();
    private string NewMessage = string.Empty;
    private string CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext.User.Identity.IsAuthenticated)
        {
            CurrentUserId = httpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", async (userId, message) =>
            {
                var sender = await UserManager.FindByIdAsync(userId);
                var msg = new ChatMessage
                {
                    SenderId = userId,
                    Content = message,
                    Timestamp = DateTime.UtcNow,
                    Sender = sender
                };
                Messages.Add(msg);
                await InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinChat", int.Parse(ChatId));

            var chat = await ChatService.GetChatAsync(int.Parse(ChatId));
            Messages = chat.Messages.ToList();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(NewMessage))
        {
            await hubConnection.InvokeAsync("SendMessage", int.Parse(ChatId), CurrentUserId, NewMessage);
            NewMessage = string.Empty;
            await ScrollToBottom(); // Вызов прокрутки после отправки сообщения
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(NewMessage))
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatContainer");
    }


    private async Task DeleteChat()
    {
        await ChatService.DeleteChatAsync(int.Parse(ChatId));
        NavigationManager.NavigateTo("/chats");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("LeaveChat", int.Parse(ChatId));
            await hubConnection.DisposeAsync();
        }
    }
}

@* Скрипт для прокрутки страницы вниз при написании нового сообщения *@
<script>
    function scrollToBottom() {
        setTimeout(function () {
            var element = document.getElementById('chatContainer');
            element.scrollTop = element.scrollHeight;
        }, 100); // Задержка в 100 миллисекунд
    }

</script>