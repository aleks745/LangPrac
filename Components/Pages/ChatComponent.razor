@page "/chat/{ChatId}"
@using LangPrac.Data
@using LangPrac.Services
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@inject IJSRuntime JSRuntime
@inject IChatService ChatService
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
    body {
        overflow-y: hidden; /* Запрет прокрутки и скрытие скроллбара */
    }
    .page {
        background: url('searchbg.png') no-repeat center center fixed !important;
        background-size: cover !important;
        background-attachment: fixed !important;
        min-height: 100vh !important;
        width: 100vw !important;
        font-size: 2.1vh;
    }

    .chat-layout {
        display: flex;
        flex-direction: column;
        height: 100vh;
        background-color: #184f78; 
    }

    .chat-container {
        display: flex;
        flex-direction: column;
        overflow-y: auto;
        height: 74vh;
        padding: 1.11vh;
        background-color: #163d5e;
        color: #ffffff;
    }
        .chat-container::-webkit-scrollbar {
            width: 0.28vw; /* ширина полосы прокрутки */
        }

        .chat-container::-webkit-scrollbar-track {
            background: #aaa; /* светло-синий цвет дорожки */
            border-radius: 1.11vh;
        }

        .chat-container::-webkit-scrollbar-thumb {
            background: #888; /* зеленый цвет ползунка */
            border-radius: 1.11vh;
        }

            .chat-container::-webkit-scrollbar-thumb:hover {
                background: #555; /* темно-зеленый цвет ползунка при наведении */
            }

    .message {
        max-width: 70%;
        padding: 0.89vh 1.78vh;
        margin-bottom: 1.11vh;
        border-radius: 2.22vh;
        color: white;
        word-wrap: break-word;
    }

    .user-message {
        background-color: #4caf50; /* Зеленый цвет для сообщений пользователя */
        margin-left: auto; /* Выравнивание справа */
        animation: slideInFromRight 0.5s forwards;
    }

    .partner-message {
        background-color: #1a8ec2; /* Светло-синий фон для сообщений партнера */
        color: #ffffff; /* Цвет текста */
        margin-right: auto; /* Выравнивание слева */
        animation: slideInFromLeft 0.5s forwards;
    }

    .chat-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 5px 10px;
        background-color: #163d5e; /* Темный фон для заголовка */
    }

    .btn-danger {
        background-color: #e57373; /* Светло-красный цвет для кнопки удаления */
    }

    .btn-send {
        background-image: linear-gradient(to right, #81c784 0%, #388e3c 100%); /* Зеленый градиент для кнопки отправки */
    }

    .timestamp {
        display: block;
        font-size: 1.65vh;
        opacity: 0.75;
        text-align: right;
    }

    .chat-input {
        position: sticky; /* Используем sticky для прикрепления к нижней части */
        bottom: 0; /* Прикрепляем к нижней части контейнера */
        display: flex;
        justify-content: center;
        padding: 1.67vh;
        border-radius: 1.67vh;
        gap: 1.11vh;
        background-color: #1a8ec2; /* Светло-синий фон для ввода текста */
        width: 100%; /* Гарантируем, что элемент занимает всю ширину */
    }


        .chat-input input[type="text"] {
            background: linear-gradient(145deg, #2a6fa8, #184f78);
            border: 0.1vh solid #ccc;
        }

    button {
        border: none;
        padding: 1.11vh 2.22vh;
        border-radius: 1.67vh;
        font-size: 1.78vh;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .delete-chat-button {
        position: absolute;
        top: 1.11vh;
        right: 1.11vw; 
    }

    <style>
        @@keyframes slideInFromRight {
            0% {
                transform: translateX(100%);
                opacity: 0;
            }
            100% {
                transform: translateX(0);
                opacity: 1;
            }
        }
        @@keyframes slideInFromLeft {
            0% {
                transform: translateX(-100%);
                opacity: 0;
            }
            100% {
                transform: translateX(0);
                opacity: 1;
            }
        }
    </style>
</style>

<div class="chat-layout">
    <div class="chat-header">
        <button class="btn btn-danger" @onclick="DeleteChat">Delete Chat</button>
    </div>

    <div class="chat-container" id="chatContainer">
        @foreach (var message in Messages)
        {
            <div class="@($"message {(message.SenderId == CurrentUserId ? "user-message" : "partner-message")}")">
                <strong>@message.Sender.Nickname:</strong> @message.Content
                <span class="timestamp">@message.Timestamp.ToLocalTime().ToString("HH:mm")</span>
            </div>
        }
    </div>

    <div class="chat-input">
        <input type="text" @bind="NewMessage" @onkeypress="HandleKeyPress" />
        <button class="btn btn-send" @onclick="SendMessage">Send</button>
    </div>
</div>

@code {
    [Parameter]
    public string ChatId { get; set; }
    private HubConnection hubConnection;
    private List<ChatMessage> Messages = new List<ChatMessage>();
    private string NewMessage = string.Empty;
    private string CurrentUserId;

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext.User.Identity.IsAuthenticated)
        {
            CurrentUserId = httpContext.User.FindFirst(ClaimTypes.NameIdentifier).Value;

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                .Build();

            hubConnection.On<string, string>("ReceiveMessage", async (userId, message) =>
            {
                var sender = await UserManager.FindByIdAsync(userId);
                var msg = new ChatMessage
                {
                    SenderId = userId,
                    Content = message,
                    Timestamp = DateTime.UtcNow,
                    Sender = sender
                };
                Messages.Add(msg);
                await InvokeAsync(StateHasChanged);
                await JSRuntime.InvokeVoidAsync("scrollToBottom");
            });

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("JoinChat", int.Parse(ChatId));

            var chat = await ChatService.GetChatAsync(int.Parse(ChatId));
            Messages = chat.Messages.ToList();
        }
        else
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(NewMessage))
        {
            await hubConnection.InvokeAsync("SendMessage", int.Parse(ChatId), CurrentUserId, NewMessage);
            NewMessage = string.Empty;
            await ScrollToBottom(); // Вызов прокрутки после отправки сообщения
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(NewMessage))
        {
            await SendMessage();
        }
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatContainer");
    }


    private async Task DeleteChat()
    {
        await ChatService.DeleteChatAsync(int.Parse(ChatId));
        NavigationManager.NavigateTo("/chats");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("LeaveChat", int.Parse(ChatId));
            await hubConnection.DisposeAsync();
        }
    }
}

@* Скрипт для прокрутки страницы вниз при написании нового сообщения *@
<script>
    function scrollToBottom() {
        setTimeout(function () {
            var element = document.getElementById('chatContainer');
            element.scrollTop = element.scrollHeight;
        }, 100); // Задержка в 100 миллисекунд
    }

</script>