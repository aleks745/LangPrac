@page "/notifications"

@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using LangPrac.Data
@using LangPrac.Components.Account
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JSRuntime

<style>
    body {
        overflow-x: hidden;
    }

    .page {
        background: url('searchbg.png') no-repeat center center fixed !important;
        background-size: cover !important;
        background-attachment: fixed !important;
        min-height: 100vh !important;
        width: 100vw !important;
        font-size: 2.1vh;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .notifications-top-bar {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding: 1.3vh;
    }

    .delete-all-container {
        margin-right: 1.3vh;
    }

    .delete-all-btn {
        padding: 0.65vh 1.95vh;
        font-size: 2vh;
        border-radius: 0.65vh;
        cursor: pointer;
        border: 0.13vh solid transparent;
        transition: background-color 0.2s, border-color 0.2s;
    }

    .notifications-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
    }

    .notification {
        border: 0.13vh solid rgba(255, 255, 255, 0.6);
        margin-bottom: 1.95vh;
        padding: 1.3vh 1.95vh;
        border-radius: 1.04vh;
        background-color: rgba(255, 255, 255, 0.75);
        box-shadow: 0 0.26vh 0.65vh rgba(0,0,0,0.1);
        transition: background-color 0.3s;
        max-width: 50%;
        width: 100%;
    }

        .notification:hover {
            background-color: rgba(255, 255, 255, 1);
        }

        .notification p {
            margin: 0.65vh 0;
            color: #333;
        }

        .notification time {
            display: block;
            font-size: 1.1vh;
            color: #666;
        }

        .notification .btn {
            margin-top: 1.04vh;
            padding: 0.65vh 1.3vh;
            font-size: 2vh;
            border-radius: 0.52vh;
            cursor: pointer;
            border: 0.13vh solid transparent;
            transition: background-color 0.2s, border-color 0.2s;
        }

        .notification[data-status="Pending"] {
            border-color: #ffc107;
        }

        .notification[data-status="Accepted"] {
            border-color: #28a745;
            background-color: #e6f9e6;
        }

        .notification[data-status="Declined"] {
            border-color: #dc3545;
            background-color: #f9e6e6;
        }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100vw;
        height: 100vh;
        overflow: auto;
        background-color: rgb(0, 0, 0);
        background-color: rgba(0, 0, 0, 0.4);
        padding-top: 5vh;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5vh auto;
        padding: 2vh 2vw;
        border: 1vh solid #888;
        width: 80vw;
        border-radius: 2.22vh;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 2.2vh;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .btn-upgrade,
    .btn-delete {
        padding: 0.65vh 1.3vh;
        font-size: 2vh;
        border-radius: 0.52vh;
        cursor: pointer;
        border: none;
    }

    .btn-upgrade {
        background-color: #28a745;
        color: white;
        margin-right: 1vh;
    }

        .btn-upgrade:hover {
            background-color: #218838;
        }

    .btn-delete {
        background-color: #dc3545;
        color: white;
    }

        .btn-delete:hover {
            background-color: #c82333;
        }

    .btn-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>

@attribute [Authorize]

<div class="notifications-top-bar">
    <div class="delete-all-container">
        <button class="btn btn-danger delete-all-btn" @onclick="DeleteAllNotifications">Удалить все</button>
    </div>
</div>

<div class="notifications-container">
    @if (NotificationList != null && NotificationList.Count > 0)
    {
        @foreach (var notification in NotificationList)
        {
            <div class="notification" data-status="@notification.Status">
                <p>@notification.Message</p>
                <p class="timestamp">Sent: @notification.CreatedAt.ToLocalTime().ToString("g")</p>
                @if (notification.HasPartnerInitiatedEnd)
                {
                    <div class="btn-container">
                        <button class="btn-upgrade" @onclick="UpgradeLanguageLevel">Повысить уровень языка</button>
                        <button class="btn-delete" @onclick="() => RemoveNotification(notification.Id)">Удалить уведомление</button>
                    </div>
                }
                else if (notification.Status == "Pending")
                {
                    <button class="btn btn-success" @onclick="() => AcceptInvite(notification.Id)">Принять заявку</button>
                    <button class="btn btn-danger" @onclick="() => DeclineInvite(notification)">Отклонить заявку</button>
                }
            </div>
        }
    }
    else
    {
        <p>No notifications to display.</p>
    }
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private List<Notification> NotificationList { get; set; } = new List<Notification>();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext == null)
        {
            HttpContext = HttpContextAccessor.HttpContext;
        }

        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        var currentUserId = UserManager.GetUserId(HttpContext.User);

        await LoadUserNotificationsAsync();
    }

    private async Task AcceptInvite(int notificationId)
    {
        var notification = await DbContext.Notifications.FindAsync(notificationId);
        if (notification != null)
        {
            var chatService = HttpContext.RequestServices.GetRequiredService<IChatService>();
            var chat = await chatService.CreateChatAsync(notification.SenderId, notification.ReceiverId);

            notification.Status = "Accepted";
            await DbContext.SaveChangesAsync();

            NavigationManager.NavigateTo($"/chat/{chat.Id}");
        }
    }

    private async Task DeclineInvite(Notification notification)
    {
        DbContext.Notifications.Remove(notification);
        await DbContext.SaveChangesAsync();

        var declineNotification = new Notification
            {
                SenderId = notification.ReceiverId,
                ReceiverId = notification.SenderId,
                Message = $"Your invitation to {UserManager.FindByIdAsync(notification.ReceiverId).Result.UserName} has been declined.",
                Status = "Declined"
            };

        DbContext.Notifications.Add(declineNotification);
        await DbContext.SaveChangesAsync();
        await LoadUserNotificationsAsync();
    }

    private async Task DeleteAllNotifications()
    {
        var currentUserId = UserManager.GetUserId(HttpContext.User);
        if (string.IsNullOrEmpty(currentUserId))
        {
            // Log error or handle the case where the user ID is not available
            Console.WriteLine("Error: User ID is null or empty.");
            return;
        }

        var notifications = await DbContext.Notifications
            .Where(n => n.ReceiverId == currentUserId)
            .ToListAsync();

        if (notifications == null)
        {
            Console.WriteLine("No notifications found for the current user.");
            return;
        }

        foreach (var notification in notifications)
        {
            if (notification.Status == "Pending")
            {
                // Automatically decline the invite if it's pending
                var declineNotification = new Notification
                    {
                        SenderId = notification.ReceiverId,
                        ReceiverId = notification.SenderId,
                        Message = $"Your invitation to {UserManager.FindByIdAsync(notification.ReceiverId).Result.UserName} has been declined.",
                        Status = "Declined"
                    };
                DbContext.Notifications.Add(declineNotification);
            }
            DbContext.Notifications.Remove(notification);
        }

        await DbContext.SaveChangesAsync();
        await LoadUserNotificationsAsync();
    }

    private async Task LoadUserNotificationsAsync()
    {
        var currentUserId = UserManager.GetUserId(HttpContext.User);
        NotificationList = await DbContext.Notifications
            .Where(n => n.ReceiverId == currentUserId)
            .OrderByDescending(n => n.CreatedAt)
            .ToListAsync();
        StateHasChanged();
    }

    private void UpgradeLanguageLevel()
    {
        NavigationManager.NavigateTo("/profile");
    }

    private async Task RemoveNotification(int notificationId)
    {
        var notification = await DbContext.Notifications.FindAsync(notificationId);
        if (notification != null)
        {
            DbContext.Notifications.Remove(notification);
            await DbContext.SaveChangesAsync();
            await LoadUserNotificationsAsync();
        }
    }
}