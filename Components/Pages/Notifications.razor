@page "/notifications"

@using LangPrac.Services
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using LangPrac.Data
@using LangPrac.Components.Account
@using Microsoft.EntityFrameworkCore

@inject IChatService ChatService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

<style>
    body {
        overflow-x: hidden;
    }

    .page {
        background: url('searchbg.png') no-repeat center center fixed !important;
        background-size: cover !important;
        background-attachment: fixed !important;
        min-height: 100vh !important;
        width: 100vw !important;
        font-size: 2.1vh;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

        .btn-success:hover {
            background-color: #218838;
        }

    .notifications-top-bar {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding: 1.3vh;
    }

    .delete-all-container {
        margin-right: 1.3vh;
    }

    .delete-all-btn {
        padding: 0.65vh 1.95vh;
        font-size: 2vh;
        border-radius: 0.65vh;
        cursor: pointer;
        border: 0.13vh solid transparent;
        transition: background-color 0.2s, border-color 0.2s;
    }

    .notifications-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%;
    }

    .notification {
        border: 0.13vh solid rgba(255, 255, 255, 0.6);
        margin-bottom: 1.95vh;
        padding: 1.3vh 1.95vh;
        border-radius: 1.04vh;
        background-color: rgba(255, 255, 255, 0.75);
        box-shadow: 0 0.26vh 0.65vh rgba(0,0,0,0.1);
        transition: background-color 0.3s;
        max-width: 50%;
        width: 100%;
    }

        .notification:hover {
            background-color: rgba(255, 255, 255, 1);
        }

        .notification p {
            margin: 0.65vh 0;
            color: #333;
        }

        .notification time {
            display: block;
            font-size: 1.1vh;
            color: #666;
        }

        .notification .btn {
            margin-top: 1.04vh;
            padding: 0.65vh 1.3vh;
            font-size: 2vh;
            border-radius: 0.52vh;
            cursor: pointer;
            border: 0.13vh solid transparent;
            transition: background-color 0.2s, border-color 0.2s;
        }

        .notification[data-status="Pending"] {
            border-color: #ffc107;
        }

        .notification[data-status="Accepted"] {
            border-color: #28a745;
            background-color: #e6f9e6;
        }

        .notification[data-status="Declined"] {
            border-color: #dc3545;
            background-color: #f9e6e6;
        }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100vw;
        height: 100vh;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
        padding-top: 10vh;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1vh;
    }

    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 1.5vh 1.5vw;
        border: 1vh solid #888;
        width: 25vw;
        border-radius: 1.5vh;
        box-shadow: 0 0.5vh 1vh rgba(0, 0, 0, 0.2);
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 3vh;
        font-weight: bold;
        cursor: pointer;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
        }

    .btn-upgrade,
    .btn-rate-partner,
    .btn-delete {
        padding: 0.65vh 1.3vh;
        font-size: 2vh;
        border-radius: 0.52vh;
        cursor: pointer;
        border: none;
    }

    .btn-upgrade {
        background-color: #28a745;
        color: white;
        margin-right: 1vh;
    }

        .btn-upgrade:hover {
            background-color: #218838;
        }

    .btn-delete {
        background-color: #dc3545;
        color: white;
    }

        .btn-delete:hover {
            background-color: #c82333;
        }

    .btn-container {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .btn-rate-partner {
        background-color: #b38600;
        color: white;
        margin-right: 1vh;
    }

        .btn-rate-partner:hover {
            background-color: #8b6900;
        }

    .btn-rate-confirm {
        background-color: #007bff;
        color: white;
    }

        .btn-rate-confirm:hover {
            background-color: #0056b3;
        }

    .refresh-btn {
        background-color: #d98c00;
        color: white;
        padding: 0.65vh 1.95vh;
        font-size: 2vh;
        border-radius: 0.65vh;
        cursor: pointer;
        border: 0.13vh solid transparent;
        transition: background-color 0.2s, border-color 0.2s;
        box-shadow: 0 0.3vh 0.6vh rgba(0, 0, 0, 0.15);
    }

        .refresh-btn:hover {
            background-color: #cc8400;
        }
</style>

<PageTitle>LаngPrac</PageTitle>

@attribute [Authorize]

<div class="notifications-top-bar">
    <div class="delete-all-container">
        <button class="refresh-btn" @onclick="RefreshNotifications">Оновити</button>
        <button class="btn-danger delete-all-btn" @onclick="DeleteAllNotifications">Видалити всі</button>
    </div>
</div>

<div class="notifications-container">
    @if (NotificationList != null && NotificationList.Count > 0)
    {
        @foreach (var notification in NotificationList)
        {
            <div class="notification" data-status="@notification.Status">
                <p>@notification.Message</p>
                @if (!string.IsNullOrEmpty(notification.UserLanguagesInfo))
                {
                    <p>@notification.UserLanguagesInfo</p>
                }
                @if (!string.IsNullOrEmpty(notification.UserInfo))
                {
                    <p>@notification.UserInfo</p>
                }
                @if (notification.HasPartnerInitiatedEnd)
                {
                    <div class="btn-container">
                        <button class="btn-upgrade" @onclick="UpgradeLanguageLevel">Підвищити рівень мови</button>
                        @if (notification.HasPartnerInitiatedEnd && !notification.IsRated)
                        {
                            <button class="btn-rate-partner" @onclick="() => ShowRatePartnerModal(notification.SenderId, notification.Id)">Оцінити партнера</button>
                        }
                        <button class="btn-delete" @onclick="() => RemoveNotification(notification.Id)">Видалити повідомлення</button>
                    </div>
                }
                else if (notification.Status == "Pending")
                {
                    <button class="btn btn-success" @onclick="() => AcceptInvite(notification.Id)">Прийняти заявку</button>
                    <button class="btn btn-danger" @onclick="() => DeclineInvite(notification)">Відхилити заявку</button>
                }
                <p class="timestamp">Відправлено: @notification.CreatedAt.ToLocalTime().AddHours(3).ToString("HH:mm")</p>
            </div>
        }
    }
    else
    {
        <p style="background-color: rgba(255, 255, 255, 0.65); border: 0.1vw solid #000; border-radius: 0.9vw; padding: 0.5vw; box-shadow: 0.2vw 0.2vw 0.5vw rgba(0, 0, 0, 0.5); max-width: 30vw; margin: 2vw auto; text-align: center;">
            Повідомлень немає
        </p>
    }
</div>


<div id="ratePartnerModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Оцінка партнера</h2>
            <span class="close" @onclick="CloseRatePartnerModal">&times;</span>
        </div>
        <div class="modal-body">
            <p>Поставте оцінку вашому партнеру:</p>
            <select @bind="SelectedRating">
                @for (int i = 1; i <= 5; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>
        <div class="modal-footer">
            <button class="btn-rate-confirm" @onclick="SubmitRating">Оцінити</button>
        </div>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private List<Notification> NotificationList { get; set; } = new List<Notification>();
    private int SelectedRating = 1;
    private string CurrentPartnerId;
    private HashSet<int> RatedNotifications = new HashSet<int>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated != true)
        {
            throw new InvalidOperationException("User is not authenticated.");
        }

        var appUser = await UserManager.GetUserAsync(user);
        username = await UserManager.GetUserNameAsync(appUser);
        var currentUserId = UserManager.GetUserId(user);

        await LoadUserNotificationsAsync();
    }

    private async Task RefreshNotifications()
    {
        await LoadUserNotificationsAsync();
    }

    private async Task AcceptInvite(int notificationId)
    {
        var notification = await DbContext.Notifications.FindAsync(notificationId);
        if (notification != null)
        {
            var chat = await ChatService.CreateChatAsync(notification.SenderId, notification.ReceiverId);
            notification.Status = "Accepted";

            await DbContext.SaveChangesAsync();

            await ChatService.CreateChatConfirmationNotification(notification.ReceiverId, notification.SenderId);

            NavigationManager.NavigateTo($"/chat/{chat.Id}");
        }
    }

    private async Task DeclineInvite(Notification notification)
    {
        DbContext.Notifications.Remove(notification);
        await DbContext.SaveChangesAsync();

        var declineNotification = new Notification
            {
                SenderId = notification.ReceiverId,
                ReceiverId = notification.SenderId,
                Message = $"Ваше запрошення до {UserManager.FindByIdAsync(notification.ReceiverId).Result.UserName} було відхилено.",
                Status = "Declined"
            };

        DbContext.Notifications.Add(declineNotification);
        await DbContext.SaveChangesAsync();
        await LoadUserNotificationsAsync();
    }

    private async Task DeleteAllNotifications()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUserId = UserManager.GetUserId(user);

        if (string.IsNullOrEmpty(currentUserId))
        {
            Console.WriteLine("Error: User ID is null or empty.");
            return;
        }

        var notifications = await DbContext.Notifications
            .Where(n => n.ReceiverId == currentUserId)
            .ToListAsync();

        if (notifications == null || notifications.Count == 0)
        {
            Console.WriteLine("No notifications found for the current user.");
            return;
        }

        foreach (var notification in notifications)
        {
            if (notification.Status == "Pending")
            {
                var declineNotification = new Notification
                    {
                        SenderId = notification.ReceiverId,
                        ReceiverId = notification.SenderId,
                        Message = $"Ваше запрошення до {UserManager.FindByIdAsync(notification.ReceiverId).Result.UserName} було відхилено.",
                        Status = "Declined",
                        UserInfo = string.Empty
                    };
                DbContext.Notifications.Add(declineNotification);
            }

            if (!notification.HasPartnerInitiatedEnd)
            {
                DbContext.Notifications.Remove(notification);
            }
        }

        await DbContext.SaveChangesAsync();
        await LoadUserNotificationsAsync();

        RatedNotifications.Clear();
    }

    private async Task LoadUserNotificationsAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var currentUserId = UserManager.GetUserId(user);

        NotificationList = await DbContext.Notifications
            .Where(n => n.ReceiverId == currentUserId)
            .OrderByDescending(n => n.CreatedAt)
            .ToListAsync();
        StateHasChanged();
    }

    private void UpgradeLanguageLevel()
    {
        NavigationManager.NavigateTo("/profile");
    }

    private int CurrentNotificationId;
    private void ShowRatePartnerModal(string partnerId, int notificationId)
    {
        CurrentPartnerId = partnerId;
        CurrentNotificationId = notificationId;
        var modal = JSRuntime.InvokeVoidAsync("eval", "document.getElementById('ratePartnerModal').style.display='block'");
    }

    private void CloseRatePartnerModal()
    {
        var modal = JSRuntime.InvokeVoidAsync("eval", "document.getElementById('ratePartnerModal').style.display='none'");
    }

    private async Task SubmitRating()
    {
        await ChatService.RatePartnerAsync(CurrentPartnerId, SelectedRating, CurrentNotificationId);
        var notification = NotificationList.FirstOrDefault(n => n.Id == CurrentNotificationId);
        if (notification != null)
        {
            notification.IsRated = true;
        }
        StateHasChanged();
        CloseRatePartnerModal();
    }

    private async Task RemoveNotification(int notificationId)
    {
        var notification = await DbContext.Notifications.FindAsync(notificationId);
        if (notification != null)
        {
            DbContext.Notifications.Remove(notification);
            await DbContext.SaveChangesAsync();
            await LoadUserNotificationsAsync();
        }
    }
}