@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using LangPrac.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<style>
    .page {
        background: url('bgimage.png') no-repeat center center fixed !important;
        background-size: cover !important;
        height: 100vh !important;
        width: 100vw !important;
    }


    body {
        overflow-y: hidden;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

        *:focus {
            outline: none;
        }

    .lbody {
        position: relative;
        width: 100%;
        min-height: 100vh;
        height: auto;
        display: flex;
        justify-content: center;
        align-items: center;
        background-size: cover;
        background-position: center;
        font-family: 'roboto', sans-serif;
    }

    .lform {
        width: 400px;
        height: auto;
        color: #fff;
        font-family: 'roboto', sans-serif;
    }

    .lheading {
        text-align: center;
        font-size: 80px;
        font-weight: 300;
        margin-bottom: 50px;
    }

    input,
    .lsubmit-btn {
        width: 80%;
        height: 35px;
        display: block;
        margin: 20px auto;
        border-radius: 5px;
        background: rgba(255, 255, 255, 0.3);
        border: none;
        color: #fff;
        padding: 15px;
        transition: .5s;
    }

        input::placeholder {
            color: #fff;
        }

        input:focus,
        .lsubmit-btn:hover {
            background: #fff;
            color: #000;
        }

            input:focus::placeholder {
                color: #000;
            }

    .lsubmit-btn {
        width: auto;
        padding: 0 20px;
        cursor: pointer;
        margin: 50px auto 0;
    }

    .llink {
        text-align: center;
        color: rgba(255, 255, 255, 0.8);
        display: block;
        margin: 30px auto;
    }

        .llink:hover {
            color: #fff;
        }

    .lalert-box {
        position: absolute;
        top: -100%;
        left: 50%;
        transform: translateX(-50%);
        min-width: 150px;
        max-width: 90%;
        width: auto;
        height: auto;
        padding: 10px;
        background: rgb(255, 119, 119);
        border-top: 10px solid rgb(255, 37, 37);
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
        color: #fff;
        font-family: 'roboto', sans-serif;
        text-align: center;
        transition: 1s;
    }
</style>

<PageTitle>Log in</PageTitle>

<div class="lalert-box">
    <p class="lalert"></p>
</div>

<div class="lbody">
    <div class="lform">
        <h1 class="lheading">Login</h1>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <InputText @bind-Value="Input.Email" type="email" class="email" autocomplete="username" aria-required="true" placeholder="Email" />
            <InputText type="password" @bind-Value="Input.Password" class="password" autocomplete="current-password" aria-required="true" placeholder="Password" />
            <button class="lsubmit-btn">Log in</button>
        </EditForm>
        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="llink">Don't have an account? Register one</a>
    </div>
</div>



@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext.Request.Query.TryGetValue("RegistrationSuccess", out var registrationSuccess) && registrationSuccess == "True")
        {
            // Показываем сообщение об успешной регистрации
            errorMessage = "Registration successful. Please log in.";
        }

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            Logger.LogWarning("User login attempt failed.");
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
