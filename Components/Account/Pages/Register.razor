@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using LangPrac.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<style>
    .page {
        background: url('bgimage.png') no-repeat center center fixed !important;
        background-size: cover !important; /* Используйте 'cover' для полного покрытия */
        height: 100vh !important; /* Устанавливаем высоту вьюпорта на 100% */
        width: 100vw !important; /* Устанавливаем ширину вьюпорта на 100% */
    }

    body {
        overflow-y: hidden;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

        *:focus {
            outline: none;
        }

    .lbody {
        position: relative;
        width: 100%;
        min-height: 100vh;
        height: auto;
        display: flex;
        justify-content: center;
        align-items: center;
        background-size: cover;
        background-position: center;
        font-family: 'roboto', sans-serif;
    }

    .lform {
        width: 400px;
        height: auto;
        color: #fff;
        font-family: 'roboto', sans-serif;
    }

    .lheading {
        text-align: center;
        font-size: 80px;
        font-weight: 300;
        margin-bottom: 50px;
    }

    input,
    .lsubmit-btn {
        width: 80%;
        height: 35px;
        display: block;
        margin: 20px auto;
        border-radius: 5px;
        background: rgba(255, 255, 255, 0.3);
        border: none;
        color: #fff;
        padding: 15px;
        transition: .5s;
    }

        input::placeholder {
            color: #fff;
        }

        input:focus,
        .lsubmit-btn:hover {
            background: #fff;
            color: #000;
        }

            input:focus::placeholder {
                color: #000;
            }

    .lsubmit-btn {
        width: auto;
        padding: 0 20px;
        cursor: pointer;
        margin: 50px auto 0;
    }

    .llink {
        text-align: center;
        color: rgba(255, 255, 255, 0.8);
        display: block;
        margin: 30px auto;
    }

        .llink:hover {
            color: #fff;
        }

    .lalert-box {
        position: absolute;
        top: -100%;
        left: 50%;
        transform: translateX(-50%);
        min-width: 150px;
        max-width: 90%;
        width: auto;
        height: auto;
        padding: 10px;
        background: rgb(255, 119, 119);
        border-top: 10px solid rgb(255, 37, 37);
        border-bottom-left-radius: 10px;
        border-bottom-right-radius: 10px;
        color: #fff;
        font-family: 'roboto', sans-serif;
        text-align: center;
        transition: 1s;
    }
</style>

<PageTitle>Реєстрація</PageTitle>

<div class="lalert-box">
    <p class="lalert"></p>
</div>

<div class="lbody">
    <div class="lform">
        <h1 class="lheading">Реєстрація</h1>
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            @* <input type="text" placeholder="name" autocomplete="off" class="name" required> *@
            <InputText @bind-Value="Input.Email" type="email" class="email" autocomplete="username" aria-required="true" placeholder="Електронна пошта" />
            <InputText @bind-Value="Input.Nickname" class="name" autocomplete="off" aria-required="true" placeholder="Ім'я" />
            <InputText type="password" @bind-Value="Input.Password" class="password" autocomplete="new-password" aria-required="true" placeholder="Пароль" />
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="password" autocomplete="new-password" aria-required="true" placeholder="Підтвердіть пароль" />
            <button type="submit" class="lsubmit-btn">Зареєструватися</button>
        </EditForm>
        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="llink">Вже маєте обліковий запис? Увійдіть тут</a>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        // Створює нового користувача
        var user = CreateUser();

        // Встановлює ім'я користувача (email) для нового користувача
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);

        // Отримує email сховище для подальшого використання
        var emailStore = GetEmailStore();

        // Встановлює email для нового користувача
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        // Встановлює нікнейм для нового користувача
        user.Nickname = Input.Nickname;

        // Створює нового користувача з паролем
        var result = await UserManager.CreateAsync(user, Input.Password);

        // Якщо створення користувача не вдалось, зберігає помилки і завершує виконання
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        // Логує інформацію про успішне створення нового користувача
        Logger.LogInformation("User created a new account with password.");

        // Перенаправляє користувача на сторінку входу з параметром успішної реєстрації
        RedirectManager.RedirectTo("Account/Login", new Dictionary<string, object?> { ["RegistrationSuccess"] = true });
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            // Створює новий екземпляр класу ApplicationUser
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            // Викидає виключення, якщо не вдається створити екземпляр класу ApplicationUser
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "Nickname")]
        public string Nickname { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "Довжина {0} має бути не менше {2} і не більше {1} символів.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "Пароль і пароль підтвердження не збігаються.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
